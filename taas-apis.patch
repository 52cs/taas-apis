From 79e73a98f25a56e793aaadbb9255bf3a99ecedd5 Mon Sep 17 00:00:00 2001
From: eisbilir <emre.isbilir@gmail.com>
Date: Sat, 29 May 2021 00:14:42 +0300
Subject: [PATCH] role endpoint added

---
 README.md                                     |    6 +-
 app-constants.js                              |    8 +-
 config/default.js                             |    9 +
 data/demo-data.json                           |  260 +-
 ...coder-bookings-api.postman_collection.json | 3799 ++++++++++++++++-
 docs/swagger.yaml                             |  476 +++
 ...topcoder-bookings.postman_environment.json |   56 +-
 local/kafka-client/topics.txt                 |    3 +
 migrations/2021-05-27-1-role-table-create.js  |  146 +
 .../2021-05-27-2-job-add-roleIds-field.js     |   19 +
 package.json                                  |    1 +
 scripts/data/exportData.js                    |    2 +-
 scripts/data/importData.js                    |    2 +-
 scripts/es/createIndex.js                     |    3 +-
 scripts/es/deleteIndex.js                     |    3 +-
 scripts/es/reIndexAll.js                      |    1 +
 scripts/es/reIndexRoles.js                    |   37 +
 src/bootstrap.js                              |    3 +-
 src/common/helper.js                          | 1115 ++---
 src/controllers/RoleController.js             |   59 +
 src/controllers/TeamController.js             |   62 +-
 src/eventHandlers/RoleEventHandler.js         |   64 +
 src/eventHandlers/index.js                    |    4 +-
 src/models/Job.js                             |    6 +
 src/models/Role.js                            |  165 +
 src/routes/RoleRoutes.js                      |   41 +
 src/routes/TeamRoutes.js                      |   48 +-
 src/services/InterviewService.js              |    4 +-
 src/services/JobService.js                    |   42 +-
 src/services/ResourceBookingService.js        |    1 +
 src/services/RoleService.js                   |  305 ++
 src/services/TeamService.js                   |  390 +-
 32 files changed, 6271 insertions(+), 869 deletions(-)
 create mode 100644 migrations/2021-05-27-1-role-table-create.js
 create mode 100644 migrations/2021-05-27-2-job-add-roleIds-field.js
 create mode 100644 scripts/es/reIndexRoles.js
 create mode 100644 src/controllers/RoleController.js
 create mode 100644 src/eventHandlers/RoleEventHandler.js
 create mode 100644 src/models/Role.js
 create mode 100644 src/routes/RoleRoutes.js
 create mode 100644 src/services/RoleService.js

diff --git a/README.md b/README.md
index 5e3895c..aa36c62 100644
--- a/README.md
+++ b/README.md
@@ -87,6 +87,9 @@
    tc-taas-es-processor | [2021-04-09T21:20:19.035Z] app INFO : Starting kafka consumer
    tc-taas-es-processor | 2021-04-09T21:20:21.292Z INFO no-kafka-client Joined group taas-es-processor generationId 1 as no-kafka-client-076538fc-60dd-4ca4-a2b9-520bdf73bc9e
    tc-taas-es-processor | 2021-04-09T21:20:21.293Z INFO no-kafka-client Elected as group leader
+   tc-taas-es-processor | 2021-04-09T21:20:21.449Z DEBUG no-kafka-client Subscribed to taas.role.update:0 offset 0 leader kafka:9093
+   tc-taas-es-processor | 2021-04-09T21:20:21.450Z DEBUG no-kafka-client Subscribed to taas.role.delete:0 offset 0 leader kafka:9093
+   tc-taas-es-processor | 2021-04-09T21:20:21.451Z DEBUG no-kafka-client Subscribed to taas.role.requested:0 offset 0 leader kafka:9093
    tc-taas-es-processor | 2021-04-09T21:20:21.452Z DEBUG no-kafka-client Subscribed to taas.jobcandidate.create:0 offset 0 leader kafka:9093
    tc-taas-es-processor | 2021-04-09T21:20:21.455Z DEBUG no-kafka-client Subscribed to taas.job.create:0 offset 0 leader kafka:9093
    tc-taas-es-processor | 2021-04-09T21:20:21.456Z DEBUG no-kafka-client Subscribed to taas.resourcebooking.delete:0 offset 0 leader kafka:9093
@@ -103,7 +106,7 @@
    tc-taas-es-processor | 2021-04-09T21:20:21.473Z DEBUG no-kafka-client Subscribed to taas.job.update:0 offset 0 leader kafka:9093
    tc-taas-es-processor | 2021-04-09T21:20:21.474Z DEBUG no-kafka-client Subscribed to taas.resourcebooking.update:0 offset 0 leader kafka:9093
    tc-taas-es-processor | [2021-04-09T21:20:21.475Z] app INFO : Initialized.......
-   tc-taas-es-processor | [2021-04-09T21:20:21.479Z] app INFO : taas.job.create,taas.job.update,taas.job.delete,taas.jobcandidate.create,taas.jobcandidate.update,taas.jobcandidate.delete,taas.resourcebooking.create,taas.resourcebooking.update,taas.resourcebooking.delete,taas.workperiod.create,taas.workperiod.update,taas.workperiod.delete,taas.workperiodpayment.create,taas.workperiodpayment.update,taas.workperiodpayment.delete
+   tc-taas-es-processor | [2021-04-09T21:20:21.479Z] app INFO : taas.job.create,taas.job.update,taas.job.delete,taas.jobcandidate.create,taas.jobcandidate.update,taas.jobcandidate.delete,taas.resourcebooking.create,taas.resourcebooking.update,taas.resourcebooking.delete,taas.workperiod.create,taas.workperiod.update,taas.workperiod.delete,taas.workperiodpayment.create,taas.workperiodpayment.update,taas.interview.requested,taas.interview.update,taas.interview.bulkUpdate,taas.role.requested,taas.role.update,taas.role.delete
    tc-taas-es-processor | [2021-04-09T21:20:21.480Z] app INFO : Kick Start.......
    tc-taas-es-processor | ********** Topcoder Health Check DropIn listening on port 3001
    tc-taas-es-processor | Topcoder Health Check DropIn started and ready to roll
@@ -194,6 +197,7 @@ To be able to change and test `taas-es-processor` locally you can follow the nex
 | `npm run index:jobs <jobId>`                                                                                              | Indexes job data from db into ES, if jobId is not given all data is indexed. Use `-- --force` flag to skip confirmation                            |
 | `npm run index:job-candidates <jobCandidateId>`                                                                           | Indexes job candidate data from db into ES, if jobCandidateId is not given all data is indexed. Use `-- --force` flag to skip confirmation         |
 | `npm run index:resource-bookings <resourceBookingsId>`                                                                    | Indexes resource bookings data from db into ES, if resourceBookingsId is not given all data is indexed. Use `-- --force` flag to skip confirmation |
+| `npm run index:roles <roleId>`                                                                                            | Indexes roles data from db into ES, if roleId is not given all data is indexed. Use `-- --force` flag to skip confirmation                         |
 | `npm run services:up`                                                                                                     | Start services via docker-compose for local development.                                                                                           |
 | `npm run services:down`                                                                                                   | Stop services via docker-compose for local development.                                                                                            |
 | `npm run services:logs -- -f <service_name>`                                                                              | View logs of some service inside docker-compose.                                                                                                   |
diff --git a/app-constants.js b/app-constants.js
index 534e46d..9b57772 100644
--- a/app-constants.js
+++ b/app-constants.js
@@ -49,7 +49,13 @@ const Scopes = {
   READ_INTERVIEW: 'read:taas-interviews',
   CREATE_INTERVIEW: 'create:taas-interviews',
   UPDATE_INTERVIEW: 'update:taas-interviews',
-  ALL_INTERVIEW: 'all:taas-interviews'
+  ALL_INTERVIEW: 'all:taas-interviews',
+  // role
+  READ_ROLE: 'read:taas-roles',
+  CREATE_ROLE: 'create:taas-roles',
+  UPDATE_ROLE: 'update:taas-roles',
+  DELETE_ROLE: 'delete:taas-roles',
+  ALL_ROLE: 'all:taas-roles'
 }
 
 // Interview related constants
diff --git a/config/default.js b/config/default.js
index 2b5ca7b..cf2a8a4 100644
--- a/config/default.js
+++ b/config/default.js
@@ -76,6 +76,8 @@ module.exports = {
     ES_INDEX_JOB_CANDIDATE: process.env.ES_INDEX_JOB_CANDIDATE || 'job_candidate',
     // the resource booking index
     ES_INDEX_RESOURCE_BOOKING: process.env.ES_INDEX_RESOURCE_BOOKING || 'resource_booking',
+    // the role index
+    ES_INDEX_ROLE: process.env.ES_INDEX_ROLE || 'role',
 
     // the max bulk size in MB for ES indexing
     MAX_BULK_REQUEST_SIZE_MB: process.env.MAX_BULK_REQUEST_SIZE_MB || 20,
@@ -131,6 +133,13 @@ module.exports = {
   TAAS_INTERVIEW_UPDATE_TOPIC: process.env.TAAS_INTERVIEW_UPDATE_TOPIC || 'taas.interview.update',
   // the interview bulk update Kafka message topic
   TAAS_INTERVIEW_BULK_UPDATE_TOPIC: process.env.TAAS_INTERVIEW_BULK_UPDATE_TOPIC || 'taas.interview.bulkUpdate',
+  // topics for role service
+  // the create role entity Kafka message topic
+  TAAS_ROLE_CREATE_TOPIC: process.env.TAAS_ROLE_CREATE_TOPIC || 'taas.role.requested',
+  // the update role entity Kafka message topic
+  TAAS_ROLE_UPDATE_TOPIC: process.env.TAAS_ROLE_UPDATE_TOPIC || 'taas.role.update',
+  // the delete role entity Kafka message topic
+  TAAS_ROLE_DELETE_TOPIC: process.env.TAAS_ROLE_DELETE_TOPIC || 'taas.role.delete',
 
   // the Kafka message topic for sending email
   EMAIL_TOPIC: process.env.EMAIL_TOPIC || 'external.action.email',
diff --git a/data/demo-data.json b/data/demo-data.json
index e073344..5f6c4c0 100644
--- a/data/demo-data.json
+++ b/data/demo-data.json
@@ -20,6 +20,7 @@
             ],
             "status": "in-review",
             "isApplicationPageActive": false,
+            "roleIds": null,
             "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
             "updatedBy": "00000000-0000-0000-0000-000000000000",
             "createdAt": "2021-05-09T21:21:10.394Z",
@@ -45,6 +46,7 @@
             ],
             "status": "in-review",
             "isApplicationPageActive": false,
+            "roleIds": null,
             "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
             "updatedBy": "00000000-0000-0000-0000-000000000000",
             "createdAt": "2021-05-09T21:11:26.934Z",
@@ -70,6 +72,7 @@
             ],
             "status": "in-review",
             "isApplicationPageActive": false,
+            "roleIds": null,
             "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
             "updatedBy": "00000000-0000-0000-0000-000000000000",
             "createdAt": "2021-05-09T21:23:18.595Z",
@@ -95,6 +98,7 @@
             ],
             "status": "in-review",
             "isApplicationPageActive": false,
+            "roleIds": null,
             "createdBy": "00000000-0000-0000-0000-000000000000",
             "updatedBy": "00000000-0000-0000-0000-000000000000",
             "createdAt": "2021-05-09T21:12:09.293Z",
@@ -181,18 +185,29 @@
             "interviews": [
                 {
                     "id": "077aa2ca-5b60-4ad9-a965-1b37e08a5046",
+                    "xaiId": null,
                     "jobCandidateId": "881a19de-2b0c-4bb9-b36a-4cb5e223bdb5",
-                    "googleCalendarId": null,
-                    "customMessage": null,
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 1,
                     "startTimestamp": null,
-                    "attendeesList": null,
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Completed",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:16:10.887Z",
-                    "updatedAt": "2021-05-09T21:16:10.887Z"
+                    "updatedAt": "2021-05-09T21:16:10.887Z",
+                    "deletedAt": null
                 }
             ]
         },
@@ -210,33 +225,55 @@
             "interviews": [
                 {
                     "id": "b1f7ba76-640f-47e2-9463-59e51b51ec60",
+                    "xaiId": null,
                     "jobCandidateId": "827ee401-df04-42e1-abbe-7b97ce7937ff",
-                    "googleCalendarId": "dummyId",
-                    "customMessage": "This is a custom message",
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 2,
                     "startTimestamp": null,
-                    "attendeesList": null,
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Scheduling",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:17:23.517Z",
-                    "updatedAt": "2021-05-09T21:17:23.517Z"
+                    "updatedAt": "2021-05-09T21:17:23.517Z",
+                    "deletedAt": null
                 },
                 {
                     "id": "3144fa65-ea1a-4bec-81b0-7cb1c8845826",
+                    "xaiId": null,
                     "jobCandidateId": "827ee401-df04-42e1-abbe-7b97ce7937ff",
-                    "googleCalendarId": null,
-                    "customMessage": null,
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 1,
                     "startTimestamp": null,
-                    "attendeesList": null,
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Completed",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:16:39.019Z",
-                    "updatedAt": "2021-05-09T21:16:39.019Z"
+                    "updatedAt": "2021-05-09T21:16:39.019Z",
+                    "deletedAt": null
                 }
             ]
         },
@@ -254,54 +291,81 @@
             "interviews": [
                 {
                     "id": "976d23a9-5710-453f-99d9-f57a588bb610",
+                    "xaiId": null,
                     "jobCandidateId": "a4ea7bcf-5b99-4381-b99c-a9bd05d83a36",
-                    "googleCalendarId": "dummyId",
-                    "customMessage": "This is a custom message",
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 3,
                     "startTimestamp": null,
-                    "attendeesList": [
-                        "attendee1@yopmail.com",
-                        "attendee2@yopmail.com"
-                    ],
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Scheduling",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:21:28.713Z",
-                    "updatedAt": "2021-05-09T21:21:28.713Z"
+                    "updatedAt": "2021-05-09T21:21:28.713Z",
+                    "deletedAt": null
                 },
                 {
                     "id": "a23e1bf2-1084-4cfe-a0d8-d83bc6fec655",
+                    "xaiId": null,
                     "jobCandidateId": "a4ea7bcf-5b99-4381-b99c-a9bd05d83a36",
-                    "googleCalendarId": "dummyId",
-                    "customMessage": "This is a custom message",
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 2,
                     "startTimestamp": null,
-                    "attendeesList": [
-                        "attendee1@yopmail.com",
-                        "attendee2@yopmail.com"
-                    ],
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Scheduling",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:21:22.428Z",
-                    "updatedAt": "2021-05-09T21:21:22.428Z"
+                    "updatedAt": "2021-05-09T21:21:22.428Z",
+                    "deletedAt": null
                 },
                 {
                     "id": "9efd72c3-1dc7-4ce2-9869-8cca81d0adeb",
+                    "xaiId": null,
                     "jobCandidateId": "a4ea7bcf-5b99-4381-b99c-a9bd05d83a36",
-                    "googleCalendarId": null,
-                    "customMessage": null,
-                    "xaiTemplate": "interview-30",
+                    "calendarEventId": null,
+                    "templateUrl": "interview-30",
+                    "templateId": null,
+                    "templateType": null,
+                    "title": null,
+                    "locationDetails": null,
+                    "duration": null,
                     "round": 1,
                     "startTimestamp": null,
-                    "attendeesList": null,
+                    "endTimestamp": null,
+                    "hostName": null,
+                    "hostEmail": null,
+                    "guestNames": null,
+                    "guestEmails": null,
                     "status": "Completed",
+                    "rescheduleUrl": null,
                     "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
                     "updatedBy": null,
                     "createdAt": "2021-05-09T21:21:17.346Z",
-                    "updatedAt": "2021-05-09T21:21:17.346Z"
+                    "updatedAt": "2021-05-09T21:21:17.346Z",
+                    "deletedAt": null
                 }
             ]
         },
@@ -2052,5 +2116,127 @@
                 }
             ]
         }
+    ],
+    "Role": [
+        {
+            "id": "c145247d-5757-463d-9317-ff9e7026d403",
+            "name": "Angular Developer",
+            "description": "Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.",
+            "listOfSkills": [
+                "database",
+                "winforms",
+                "user interface (ui)",
+                "photoshop"
+            ],
+            "rates": [
+                {
+                    "global": 50,
+                    "offShore": 10,
+                    "inCountry": 20
+                },
+                {
+                    "global": 25,
+                    "offShore": 5,
+                    "inCountry": 15
+                }
+            ],
+            "numberOfMembers": "10",
+            "numberOfMembersAvailable": 8,
+            "imageUrl": "http://images.topcoder.com/member",
+            "timeToCandidate": 105,
+            "timeToInterview": 100,
+            "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
+            "updatedBy": null,
+            "createdAt": "2021-05-27T21:43:08.201Z",
+            "updatedAt": "2021-05-27T21:43:08.201Z"
+        },
+        {
+            "id": "d7ff0289-d3ea-44d8-b39a-53bba5b5b309",
+            "name": "Dev Ops Engineer",
+            "description": "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.",
+            "listOfSkills": [
+                "dropwizard",
+                "nginx",
+                "machine learning",
+                "force.com"
+            ],
+            "rates": [
+                {
+                    "global": 50,
+                    "offShore": 10,
+                    "inCountry": 20,
+                    "rate20Global": 20,
+                    "rate30Global": 20,
+                    "rate20OffShore": 35,
+                    "rate30OffShore": 35,
+                    "rate20InCountry": 15,
+                    "rate30InCountry": 15
+                },
+                {
+                    "global": 25,
+                    "offShore": 5,
+                    "inCountry": 15,
+                    "rate20Global": 20,
+                    "rate30Global": 20,
+                    "rate20OffShore": 35,
+                    "rate30OffShore": 35,
+                    "rate20InCountry": 15,
+                    "rate30InCountry": 15
+                }
+            ],
+            "numberOfMembers": "10",
+            "numberOfMembersAvailable": 8,
+            "imageUrl": "http://images.topcoder.com/member",
+            "timeToCandidate": 105,
+            "timeToInterview": 100,
+            "createdBy": "57646ff9-1cd3-4d3c-88ba-eb09a395366c",
+            "updatedBy": null,
+            "createdAt": "2021-05-27T21:43:04.717Z",
+            "updatedAt": "2021-05-27T21:43:04.717Z"
+        },
+        {
+            "id": "e7b7e818-40d4-4102-b486-09bdd21400b8",
+            "name": "Salesforce Developer",
+            "description": "A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.",
+            "listOfSkills": [
+                "docker",
+                ".net",
+                "appcelerator",
+                "flux"
+            ],
+            "rates": [
+                {
+                    "global": 50,
+                    "offShore": 10,
+                    "inCountry": 20,
+                    "rate20Global": 20,
+                    "rate30Global": 20,
+                    "rate20OffShore": 35,
+                    "rate30OffShore": 35,
+                    "rate20InCountry": 15,
+                    "rate30InCountry": 15
+                },
+                {
+                    "global": 25,
+                    "offShore": 5,
+                    "inCountry": 15,
+                    "rate20Global": 20,
+                    "rate30Global": 20,
+                    "rate20OffShore": 35,
+                    "rate30OffShore": 35,
+                    "rate20InCountry": 15,
+                    "rate30InCountry": 15
+                }
+            ],
+            "numberOfMembers": "10",
+            "numberOfMembersAvailable": 6,
+            "imageUrl": "http://images.topcoder.com/member",
+            "timeToCandidate": 105,
+            "timeToInterview": 100,
+            "createdBy": "00000000-0000-0000-0000-000000000000",
+            "updatedBy": null,
+            "createdAt": "2021-05-27T21:43:09.342Z",
+            "updatedAt": "2021-05-27T21:43:09.342Z"
+        }
     ]
-}
+}
\ No newline at end of file
diff --git a/docs/Topcoder-bookings-api.postman_collection.json b/docs/Topcoder-bookings-api.postman_collection.json
index a0518c5..96250f3 100644
--- a/docs/Topcoder-bookings-api.postman_collection.json
+++ b/docs/Topcoder-bookings-api.postman_collection.json
@@ -1,6 +1,6 @@
 {
 	"info": {
-		"_postman_id": "58b277bb-0d1d-4bbf-919f-c5951ba0e1c0",
+		"_postman_id": "b0508e11-af20-4ea3-bfda-fec9f40ea531",
 		"name": "Topcoder-bookings-api",
 		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
 	},
@@ -17816,6 +17816,2993 @@
 				}
 			]
 		},
+		{
+			"name": "Roles",
+			"item": [
+				{
+					"name": "Create Role",
+					"item": [
+						{
+							"name": "create role with admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"    if(pm.response.status === \"OK\"){\r",
+											"        const response = pm.response.json()\r",
+											"        pm.environment.set(\"roleId-1\", response.id);\r",
+											"    }\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with booking manager",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"    if(pm.response.status === \"OK\"){\r",
+											"        const response = pm.response.json()\r",
+											"        pm.environment.set(\"roleId-2\", response.id);\r",
+											"    }\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_bookingManager}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Angular Developer\",\n    \"description\": \"Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.\",\n    \"listOfSkills\": [\n        \"Database\",\n        \"Winforms\",\n        \"User Interface (Ui)\",\n        \"Photoshop\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with m2m create",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"    if(pm.response.status === \"OK\"){\r",
+											"        const response = pm.response.json()\r",
+											"        pm.environment.set(\"roleId-3\", response.id);\r",
+											"    }\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_m2m_create_role}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Salesforce Developer\",\n    \"description\": \"A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\",\n        \"appcelerator\",\n        \"Flux\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 6,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with connect user",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_connectUser}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with member",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_member}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 401', function () {\r",
+											"    pm.response.to.have.status(401);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer invalid_token"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with existent name",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Role: \\\"Dev Ops Engineer\\\" is already exists.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 1",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.name\\\" is required\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 2",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" is required\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 3",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" does not contain 1 required value(s)\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 4",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].global\\\" is required\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 5",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].inCountry\\\" is required\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with missing parameter 6",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].offShore\\\" is required\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 1",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.name\\\" length must be less than or equal to 50 characters long\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 2",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.listOfSkills[0]\\\" length must be less than or equal to 50 characters long\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard\",\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 3",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.listOfSkills\\\" must be an array\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\":\"Dropwizard\",\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 4",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" must be an array\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": {\n        \"global\": 50,\n        \"inCountry\": 20,\n        \"offShore\": 10\n    },\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 5",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].global\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": \"first\",\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 6",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].inCountry\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": \"fifty\",\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 7",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.numberOfMembers\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": null,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 8",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.imageUrl\\\" must be a valid uri\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 9",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"role.timeToCandidate\\\" must be less than or equal to 32767\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 99999,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create role with invalid parameter 10",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"skills: \\\"teamworking,communication,problem-solving\\\" are not valid\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer 2\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 55,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/new",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"new"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				},
+				{
+					"name": "Get Role",
+					"item": [
+						{
+							"name": "get role with admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with booking manager fromDb",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_bookingManager}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-2}}?fromDb=true",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-2}}"
+									],
+									"query": [
+										{
+											"key": "fromDb",
+											"value": "true"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with m2m read",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_m2m_read_role}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-3}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-3}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with connect user fromDb",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_connectUser}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}?fromDb=true",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									],
+									"query": [
+										{
+											"key": "fromDb",
+											"value": "true"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with member",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_member}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-2}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-2}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 401', function () {\r",
+											"    pm.response.to.have.status(401);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer invalid token"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-2}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-2}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with invalid id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/invalid",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"invalid"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get role with missing id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 404', function () {\r",
+											"    pm.response.to.have.status(404);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" not found\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles/00000000-0000-0000-0000-000000000000",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"00000000-0000-0000-0000-000000000000"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with booking manager",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_bookingManager}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles?skillsList=dropwizard,  nginx,, machine learning , FORce.com &keyword=ops e",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									],
+									"query": [
+										{
+											"key": "skillsList",
+											"value": "dropwizard,  nginx,, machine learning , FORce.com "
+										},
+										{
+											"key": "keyword",
+											"value": "ops e"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with connect user",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_connectUser}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles?skillsList=dataBase,        ,Photoshop&keyword=sale",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									],
+									"query": [
+										{
+											"key": "skillsList",
+											"value": "dataBase,        ,Photoshop"
+										},
+										{
+											"key": "keyword",
+											"value": "sale"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with m2m read",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_m2m_read_role}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles?skillsList=DOCKER,.NET&keyword=dev",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									],
+									"query": [
+										{
+											"key": "skillsList",
+											"value": "DOCKER,.NET"
+										},
+										{
+											"key": "keyword",
+											"value": "dev"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with member",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_member}}"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles?keyword=dev",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									],
+									"query": [
+										{
+											"key": "keyword",
+											"value": "dev"
+										}
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "search roles with invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 401', function () {\r",
+											"    pm.response.to.have.status(401);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer invalid token"
+									}
+								],
+								"url": {
+									"raw": "{{URL}}/roles",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				},
+				{
+					"name": "Update Role",
+					"item": [
+						{
+							"name": "update role with admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer edit\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with booking manager",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_bookingManager}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Angular Developer edit\",\n    \"description\": \"Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.\",\n    \"listOfSkills\": [\n        \"Database\",\n        \"Winforms\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-2}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-2}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with m2m update",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 200', function () {\r",
+											"    pm.response.to.have.status(200);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_m2m_update_role}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Salesforce Developer edit\",\n    \"description\": \"A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-3}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-3}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with member",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_member}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with connect user",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_connectUser}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 401', function () {\r",
+											"    pm.response.to.have.status(401);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer invalid_token"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/invalid",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"invalid"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with missing id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 404', function () {\r",
+											"    pm.response.to.have.status(404);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" doesn't exists.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/00000000-0000-0000-0000-000000000000",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"00000000-0000-0000-0000-000000000000"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with existent name",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Role: \\\"Angular Developer edit\\\" is already exists.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Angular Developer edit\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 1",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.name\\\" length must be less than or equal to 50 characters long\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 2",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.listOfSkills[0]\\\" length must be less than or equal to 50 characters long\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking\",\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 3",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.listOfSkills\\\" must be an array\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\":\"Teamworking\",\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 4",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.rates\\\" must be an array\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": {\n        \"global\": 50,\n        \"inCountry\": 20,\n        \"offShore\": 10\n    },\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 5",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.rates[0].global\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": \"first\",\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 6",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.rates[0].inCountry\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": \"fifty\",\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 7",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.numberOfMembers\\\" must be a number\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": \"hundred\",\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 8",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.imageUrl\\\" must be a valid uri\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 9",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"data.timeToCandidate\\\" must be less than or equal to 32767\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 99999,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "update role with invalid parameter 10",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"skills: \\\"teamworking\\\" are not valid\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 66,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				},
+				{
+					"name": "Delete Role",
+					"item": [
+						{
+							"name": "delete role with connect user",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_connectUser}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with member",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 403', function () {\r",
+											"    pm.response.to.have.status(403);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_member}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 401', function () {\r",
+											"    pm.response.to.have.status(401);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer invalid_token"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"teamworking\",\n        \"communication\",\n        \"problem-solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with invalid id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 400', function () {\r",
+											"    pm.response.to.have.status(400);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/invalid",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"invalid"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with missing id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 404', function () {\r",
+											"    pm.response.to.have.status(404);\r",
+											"    const response = pm.response.json()\r",
+											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" doesn't exists.\")\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/00000000-0000-0000-0000-000000000000",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"00000000-0000-0000-0000-000000000000"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 204', function () {\r",
+											"    pm.response.to.have.status(204);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_administrator}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-1}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-1}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with booking manager",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 204', function () {\r",
+											"    pm.response.to.have.status(204);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_bookingManager}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-2}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-2}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete role with m2m delete",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test('Status code is 204', function () {\r",
+											"    pm.response.to.have.status(204);\r",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{token_m2m_delete_role}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{URL}}/roles/{{roleId-3}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"roles",
+										"{{roleId-3}}"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				}
+			]
+		},
 		{
 			"name": "health check",
 			"item": [
@@ -22399,7 +25386,227 @@
 										],
 										"body": {
 											"mode": "raw",
-											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_by_administrator}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
+											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_by_administrator}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_by_administrator}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"work-period-payments",
+												"{{workPeriodPaymentId_created_by_administrator}}"
+											]
+										}
+									},
+									"response": []
+								}
+							]
+						},
+						{
+							"name": "Roles",
+							"item": [
+								{
+									"name": "✔ create role with admin",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"    if(pm.response.status === \"OK\"){\r",
+													"        const response = pm.response.json()\r",
+													"        pm.environment.set(\"roleId-1\", response.id);\r",
+													"    }\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "POST",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_administrator}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/new",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"new"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ get role with admin",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_administrator}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ search roles with admin",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_administrator}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ update role with admin",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "PATCH",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_administrator}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer edit\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ delete role with admin",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 204', function () {\r",
+													"    pm.response.to.have.status(204);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "DELETE",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_administrator}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "",
 											"options": {
 												"raw": {
 													"language": "json"
@@ -22407,13 +25614,13 @@
 											}
 										},
 										"url": {
-											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_by_administrator}}",
+											"raw": "{{URL}}/roles/{{roleId-1}}",
 											"host": [
 												"{{URL}}"
 											],
 											"path": [
-												"work-period-payments",
-												"{{workPeriodPaymentId_created_by_administrator}}"
+												"roles",
+												"{{roleId-1}}"
 											]
 										}
 									},
@@ -24635,12 +27842,295 @@
 											{
 												"key": "Authorization",
 												"type": "text",
-												"value": "Bearer {{token_member_tester1234}}"
+												"value": "Bearer {{token_member_tester1234}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_member}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"work-period-payments",
+												"{{workPeriodPaymentId_created_for_member}}"
+											]
+										}
+									},
+									"response": []
+								}
+							]
+						},
+						{
+							"name": "Roles",
+							"item": [
+								{
+									"name": "Before Start",
+									"item": [
+										{
+											"name": "✔ create role with admin",
+											"event": [
+												{
+													"listen": "test",
+													"script": {
+														"exec": [
+															"pm.test('Status code is 200', function () {\r",
+															"    pm.response.to.have.status(200);\r",
+															"    if(pm.response.status === \"OK\"){\r",
+															"        const response = pm.response.json()\r",
+															"        pm.environment.set(\"roleId-1\", response.id);\r",
+															"    }\r",
+															"});"
+														],
+														"type": "text/javascript"
+													}
+												}
+											],
+											"request": {
+												"method": "POST",
+												"header": [
+													{
+														"key": "Authorization",
+														"type": "text",
+														"value": "Bearer {{token_administrator}}"
+													}
+												],
+												"body": {
+													"mode": "raw",
+													"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+													"options": {
+														"raw": {
+															"language": "json"
+														}
+													}
+												},
+												"url": {
+													"raw": "{{URL}}/roles/new",
+													"host": [
+														"{{URL}}"
+													],
+													"path": [
+														"roles",
+														"new"
+													]
+												}
+											},
+											"response": []
+										}
+									]
+								},
+								{
+									"name": "✘ create role with member",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "POST",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_member}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/new",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"new"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ get role with member",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_member}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ search roles with member",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_member}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles?keyword=Dev",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles"
+											],
+											"query": [
+												{
+													"key": "keyword",
+													"value": "Dev"
+												}
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✘ update role with member",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "PATCH",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_member}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✘ delete role with member",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "DELETE",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_member}}"
 											}
 										],
 										"body": {
 											"mode": "raw",
-											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
+											"raw": "",
 											"options": {
 												"raw": {
 													"language": "json"
@@ -24648,13 +28138,13 @@
 											}
 										},
 										"url": {
-											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_member}}",
+											"raw": "{{URL}}/roles/{{roleId-1}}",
 											"host": [
 												"{{URL}}"
 											],
 											"path": [
-												"work-period-payments",
-												"{{workPeriodPaymentId_created_for_member}}"
+												"roles",
+												"{{roleId-1}}"
 											]
 										}
 									},
@@ -26894,10 +30384,297 @@
 									"response": []
 								}
 							]
+						},
+						{
+							"name": "Roles",
+							"item": [
+								{
+									"name": "Before Start",
+									"item": [
+										{
+											"name": "✔ create role with admin",
+											"event": [
+												{
+													"listen": "test",
+													"script": {
+														"exec": [
+															"pm.test('Status code is 200', function () {\r",
+															"    pm.response.to.have.status(200);\r",
+															"    if(pm.response.status === \"OK\"){\r",
+															"        const response = pm.response.json()\r",
+															"        pm.environment.set(\"roleId-1\", response.id);\r",
+															"    }\r",
+															"});"
+														],
+														"type": "text/javascript"
+													}
+												}
+											],
+											"request": {
+												"method": "POST",
+												"header": [
+													{
+														"key": "Authorization",
+														"type": "text",
+														"value": "Bearer {{token_administrator}}"
+													}
+												],
+												"body": {
+													"mode": "raw",
+													"raw": "{\n    \"name\": \"Dev Ops Engineer 2\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+													"options": {
+														"raw": {
+															"language": "json"
+														}
+													}
+												},
+												"url": {
+													"raw": "{{URL}}/roles/new",
+													"host": [
+														"{{URL}}"
+													],
+													"path": [
+														"roles",
+														"new"
+													]
+												}
+											},
+											"response": []
+										}
+									]
+								},
+								{
+									"name": "✘ create role with connect user",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "POST",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_connectUser}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/new",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"new"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ get role with connect user",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_connectUser}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✔ search roles with connect user",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 200', function () {\r",
+													"    pm.response.to.have.status(200);\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "GET",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_connectUser}}"
+											}
+										],
+										"url": {
+											"raw": "{{URL}}/roles?skillsList=Dropwizard,        ,NGINX&keyword=Dev",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles"
+											],
+											"query": [
+												{
+													"key": "skillsList",
+													"value": "Dropwizard,        ,NGINX"
+												},
+												{
+													"key": "keyword",
+													"value": "Dev"
+												}
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✘ update role with connect user",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "PATCH",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_connectUser}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								},
+								{
+									"name": "✘ delete role with connect user",
+									"event": [
+										{
+											"listen": "test",
+											"script": {
+												"exec": [
+													"pm.test('Status code is 403', function () {\r",
+													"    pm.response.to.have.status(403);\r",
+													"    const response = pm.response.json()\r",
+													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
+													"});"
+												],
+												"type": "text/javascript"
+											}
+										}
+									],
+									"request": {
+										"method": "DELETE",
+										"header": [
+											{
+												"key": "Authorization",
+												"type": "text",
+												"value": "Bearer {{token_connectUser}}"
+											}
+										],
+										"body": {
+											"mode": "raw",
+											"raw": "",
+											"options": {
+												"raw": {
+													"language": "json"
+												}
+											}
+										},
+										"url": {
+											"raw": "{{URL}}/roles/{{roleId-1}}",
+											"host": [
+												"{{URL}}"
+											],
+											"path": [
+												"roles",
+												"{{roleId-1}}"
+											]
+										}
+									},
+									"response": []
+								}
+							]
 						}
 					]
 				}
 			]
 		}
 	]
-}
+}
\ No newline at end of file
diff --git a/docs/swagger.yaml b/docs/swagger.yaml
index a0b6064..e5f1ac2 100644
--- a/docs/swagger.yaml
+++ b/docs/swagger.yaml
@@ -18,6 +18,8 @@ tags:
   - name: ResourceBookings
   - name: Teams
   - name: WorkPeriods
+  - name: WorkPeriodPayments
+  - name: Roles
 paths:
   /jobs:
     post:
@@ -3245,6 +3247,267 @@ paths:
             application/json:
               schema:
                 $ref: "#/components/schemas/Error"
+  /roles/new:
+    post:
+      tags:
+        - Roles
+      description: |
+        Create Role.
+
+        **Authorization** Topcoder m2m token with create scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
+      security:
+        - bearerAuth: []
+      requestBody:
+        content:
+          application/json:
+            schema:
+              $ref: "#/components/schemas/RoleRequestBody"
+      responses:
+        "200":
+          description: OK
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Role"
+        "400":
+          description: Bad request
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "401":
+          description: Not authenticated
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "403":
+          description: Forbidden
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "500":
+          description: Internal Server Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+  /roles:
+    get:
+      tags:
+        - Roles
+      description: |
+        Search roles.
+
+        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.
+      security:
+        - bearerAuth: []
+      parameters:
+        - in: query
+          name: skillsList
+          required: false
+          schema:
+            type: string
+          description: comma separated skill names. case-insensitive.
+        - in: query
+          name: keyword
+          required: false
+          schema:
+            type: string
+          description: role name. case-insensitive. partial match allowed
+      responses:
+        "200":
+          description: OK
+          content:
+            application/json:
+              schema:
+                type: array
+                items:
+                  $ref: "#/components/schemas/Role"
+        "400":
+          description: Bad request
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "401":
+          description: Not authenticated
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "500":
+          description: Internal Server Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+  /roles/{id}:
+    get:
+      tags:
+        - Roles
+      description: |
+        Get role by id.
+
+        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.
+      security:
+        - bearerAuth: []
+      parameters:
+        - in: path
+          name: id
+          description: The role id.
+          required: true
+          schema:
+            type: string
+            format: uuid
+        - in: query
+          name: fromDb
+          description: get data from db or not.
+          required: false
+          schema:
+            type: boolean
+            default: false
+      responses:
+        "200":
+          description: OK
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Role"
+        "400":
+          description: Bad request
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "401":
+          description: Not authenticated
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "404":
+          description: Not Found
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "500":
+          description: Internal Server Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+    patch:
+      tags:
+        - Roles
+      description: |
+        Partial Update role.
+
+        **Authorization** Topcoder m2m token with update scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
+      security:
+        - bearerAuth: []
+      parameters:
+        - in: path
+          name: id
+          description: The id of role.
+          required: true
+          schema:
+            type: string
+            format: uuid
+      requestBody:
+        content:
+          application/json:
+            schema:
+              $ref: "#/components/schemas/RolePatchRequestBody"
+      responses:
+        "200":
+          description: OK
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Role"
+        "400":
+          description: Bad request
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "401":
+          description: Not authenticated
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "403":
+          description: Forbidden
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "404":
+          description: Not Found
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "500":
+          description: Internal Server Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+    delete:
+      tags:
+        - Roles
+      description: |
+        Delete the role.
+
+        **Authorization** Topcoder m2m token with delete scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
+      security:
+        - bearerAuth: []
+      parameters:
+        - in: path
+          name: id
+          description: The id of role.
+          required: true
+          schema:
+            type: string
+            format: uuid
+      responses:
+        "204":
+          description: OK
+        "400":
+          description: Bad request
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "401":
+          description: Not authenticated
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "403":
+          description: Forbidden
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "404":
+          description: Not Found
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        "500":
+          description: Internal Server Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
   /health:
     get:
       tags:
@@ -3335,6 +3598,13 @@ components:
             type: string
             format: uuid
             description: "The skill id."
+        roleIds:
+          type: array
+          description: "The roles."
+          items:
+            type: string
+            format: uuid
+            description: "The role id."
         status:
           type: string
           enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
@@ -3424,6 +3694,13 @@ components:
             type: string
             format: uuid
             description: "The skill id."
+        roleIds:
+          type: array
+          description: "The roles."
+          items:
+            type: string
+            format: uuid
+            description: "The role id."
         isApplicationPageActive:
           type: boolean
           default: false
@@ -3865,6 +4142,13 @@ components:
             type: string
             format: uuid
             description: "The skill id."
+        roleIds:
+          type: array
+          description: "The roles."
+          items:
+            type: string
+            format: uuid
+            description: "The role id."
         isApplicationPageActive:
           type: boolean
           default: false
@@ -4710,6 +4994,198 @@ components:
                     type: string
                     description: "the email of a member"
                     example: "xxx@xxx.com"
+    Role:
+      required:
+        - id
+        - name
+        - rates
+        - createdAt
+        - createdBy
+      properties:
+        id:
+          type: string
+          format: uuid
+          description: "The role id."
+        name:
+          type: string
+          example: "Dev Ops Engineer"
+          description: "The role name."
+        description:
+          type: string
+          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
+          description: "The role description"
+        listOfSkills:
+          type: array
+          description: "The array of skill names."
+          items:
+            type: string
+            example: "HTML"
+            description: "The skill name"
+        rates:
+          type: array
+          description: "The rates object array."
+          items:
+            $ref: "#/components/schemas/RoleRates"
+        numberOfMembers:
+          type: number
+          example: 100
+          description: "The number of members."
+        numberOfMembersAvailable:
+          type: integer
+          example: 100
+          description: "The number of members available."
+        imageUrl:
+          type: string
+          format: url
+          example: "http://images.topcoder.com/images"
+          description: "The image url of the role."
+        timeToCandidate:
+          type: integer
+          example: 200
+          description: "The time to candidate."
+        timeToInterview:
+          type: integer
+          example: 300
+          description: "The time to interview."
+        createdAt:
+          type: string
+          format: date-time
+          description: "The role created date."
+        createdBy:
+          type: string
+          format: uuid
+          description: "The user Id who created the role.(Will get the user info from the token)"
+        updatedAt:
+          type: string
+          format: date-time
+          description: "The role last updated at."
+        updatedBy:
+          type: string
+          format: uuid
+          description: "The user Id who updated the role last time.(Will get the user info from the token)"
+    RoleRequestBody:
+      required:
+        - name
+        - rates
+      properties:
+        name:
+          type: string
+          example: "Dev Ops Engineer"
+          description: "The role name."
+        description:
+          type: string
+          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
+          description: "The role description"
+        listOfSkills:
+          type: array
+          description: "The array of skill names."
+          items:
+            type: string
+            example: "HTML"
+            description: "The skill name"
+        rates:
+          type: array
+          description: "The rates object array."
+          items:
+            $ref: "#/components/schemas/RoleRates"
+        numberOfMembers:
+          type: number
+          example: 100
+          description: "The number of members."
+        numberOfMembersAvailable:
+          type: number
+          example: 100
+          description: "The number of members available."
+        imageUrl:
+          type: string
+          format: url
+          example: "http://images.topcoder.com/images"
+          description: "The image url of the role."
+        timeToCandidate:
+          type: integer
+          example: 200
+          description: "The time to candidate."
+        timeToInterview:
+          type: integer
+          example: 300
+          description: "The time to interview."
+    RolePatchRequestBody:
+      properties:
+        name:
+          type: string
+          example: "Dev Ops Engineer"
+          description: "The role name."
+        description:
+          type: string
+          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
+          description: "The role description"
+        listOfSkills:
+          type: array
+          description: "The array of skill names."
+          items:
+            type: string
+            example: "HTML"
+            description: "The skill name"
+        rates:
+          type: array
+          description: "The rates object array."
+          items:
+            $ref: "#/components/schemas/RoleRates"
+        numberOfMembers:
+          type: number
+          example: 100
+          description: "The number of members."
+        numberOfMembersAvailable:
+          type: number
+          example: 100
+          description: "The number of members available."
+        imageUrl:
+          type: string
+          format: url
+          example: "http://images.topcoder.com/images"
+          description: "The image url of the role."
+        timeToCandidate:
+          type: integer
+          example: 200
+          description: "The time to candidate."
+        timeToInterview:
+          type: integer
+          example: 300
+          description: "The time to interview."
+    RoleRates:
+      required:
+        - global
+        - inCountry
+        - offShore
+      type: object
+      properties:
+        global:
+          type: integer
+          example: 10
+        inCountry:
+          type: integer
+          example: 20
+        offShore:
+          type: integer
+          example: 30
+        rate30Global:
+          type: integer
+          example: 10
+        rate30InCountry:
+          type: integer
+          example: 20
+        rate30OffShore:
+          type: integer
+          example: 30
+        rate20Global:
+          type: integer
+          example: 10
+        rate20InCountry:
+          type: integer
+          example: 20
+        rate20OffShore:
+          type: integer
+          example: 30
     ProjectMember:
       type: object
       example:
diff --git a/docs/topcoder-bookings.postman_environment.json b/docs/topcoder-bookings.postman_environment.json
index 837b55d..c83fc9a 100644
--- a/docs/topcoder-bookings.postman_environment.json
+++ b/docs/topcoder-bookings.postman_environment.json
@@ -1,5 +1,5 @@
 {
-	"id": "228f4dcc-6914-462e-9b56-3285b643a2f8",
+	"id": "0ce42def-1c70-4c24-8986-914caa57f3c8",
 	"name": "topcoder-bookings",
 	"values": [
 		{
@@ -312,11 +312,6 @@
 			"value": "",
 			"enabled": true
 		},
-		{
-			"key": "job_id_created_for_member",
-			"value": "",
-			"enabled": true
-		},
 		{
 			"key": "resource_bookings_id_created_for_member",
 			"value": "",
@@ -327,11 +322,6 @@
 			"value": "",
 			"enabled": true
 		},
-		{
-			"key": "job_id_created_for_connect_manager",
-			"value": "",
-			"enabled": true
-		},
 		{
 			"key": "resource_bookings_id_created_for_connect_manager",
 			"value": "",
@@ -461,9 +451,49 @@
 			"key": "interview_id_created_for_connect_manager",
 			"value": "",
 			"enabled": true
+		},
+		{
+			"key": "token_m2m_create_role",
+			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjIxNDc0ODM2NDgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJjcmVhdGU6dGFhcy1yb2xlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.f1QP1QTacyDxy7dwzUhBIT8blXCjKn_mnu9Cg59vIc8",
+			"enabled": true
+		},
+		{
+			"key": "token_m2m_read_role",
+			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjIxNDc0ODM2NDgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnRhYXMtcm9sZXMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.ZeWS_W2o8YwlvIB_-z0CFFa9zhRjptCk7qNXsPPWxVY",
+			"enabled": true
+		},
+		{
+			"key": "token_m2m_update_role",
+			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjIxNDc0ODM2NDgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJ1cGRhdGU6dGFhcy1yb2xlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.0t4k0skZmxAUKuHQrG3ZrO2dgWcDMLD8W1rVluCy7XQ",
+			"enabled": true
+		},
+		{
+			"key": "token_m2m_delete_role",
+			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjIxNDc0ODM2NDgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJkZWxldGU6dGFhcy1yb2xlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.NSBbWOk5jCB8nIvLiZwJtR9px5wmUQaQjgpDlMDJ9hk",
+			"enabled": true
+		},
+		{
+			"key": "token_m2m_all_role",
+			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjIxNDc0ODM2NDgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJhbGw6dGFhcy1yb2xlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.cn0QVTOFnbHJckYqmGcpUBT8wQUxXWwtteWU7uhlDtI",
+			"enabled": true
+		},
+		{
+			"key": "roleId-1",
+			"value": "",
+			"enabled": true
+		},
+		{
+			"key": "roleId-2",
+			"value": "",
+			"enabled": true
+		},
+		{
+			"key": "roleId-3",
+			"value": "",
+			"enabled": true
 		}
 	],
 	"_postman_variable_scope": "environment",
-	"_postman_exported_at": "2021-05-10T05:06:38.661Z",
-	"_postman_exported_using": "Postman/8.3.1"
+	"_postman_exported_at": "2021-05-27T01:32:45.726Z",
+	"_postman_exported_using": "Postman/8.5.1"
 }
\ No newline at end of file
diff --git a/local/kafka-client/topics.txt b/local/kafka-client/topics.txt
index 8766a1b..760c3a8 100644
--- a/local/kafka-client/topics.txt
+++ b/local/kafka-client/topics.txt
@@ -3,16 +3,19 @@ taas.jobcandidate.create
 taas.resourcebooking.create
 taas.workperiod.create
 taas.workperiodpayment.create
+taas.role.requested
 taas.job.update
 taas.jobcandidate.update
 taas.resourcebooking.update
 taas.workperiod.update
 taas.workperiodpayment.update
+taas.role.update
 taas.job.delete
 taas.jobcandidate.delete
 taas.resourcebooking.delete
 taas.workperiod.delete
 taas.workperiodpayment.delete
+taas.role.delete
 taas.interview.requested
 taas.interview.update
 taas.interview.bulkUpdate
diff --git a/migrations/2021-05-27-1-role-table-create.js b/migrations/2021-05-27-1-role-table-create.js
new file mode 100644
index 0000000..bce2ae1
--- /dev/null
+++ b/migrations/2021-05-27-1-role-table-create.js
@@ -0,0 +1,146 @@
+const config = require('config')
+
+/*
+ * Create role table
+ */
+
+module.exports = {
+  up: async (queryInterface, Sequelize) => {
+    const transaction = await queryInterface.sequelize.transaction()
+    try {
+      await queryInterface.createTable('roles', {
+        id: {
+          type: Sequelize.UUID,
+          primaryKey: true,
+          allowNull: false,
+          defaultValue: Sequelize.UUIDV4
+        },
+        name: {
+          type: Sequelize.STRING(50),
+          allowNull: false
+        },
+        description: {
+          type: Sequelize.STRING(1000)
+        },
+        listOfSkills: {
+          field: 'list_of_skills',
+          type: Sequelize.ARRAY({
+            type: Sequelize.STRING(50)
+          })
+        },
+        rates: {
+          type: Sequelize.ARRAY({
+            type: Sequelize.JSONB({
+              global: {
+                type: Sequelize.SMALLINT,
+                allowNull: false
+              },
+              inCountry: {
+                field: 'in_country',
+                type: Sequelize.SMALLINT,
+                allowNull: false
+              },
+              offShore: {
+                field: 'off_shore',
+                type: Sequelize.SMALLINT,
+                allowNull: false
+              },
+              rate30Global: {
+                field: 'rate30_global',
+                type: Sequelize.SMALLINT
+              },
+              rate30InCountry: {
+                field: 'rate30_in_country',
+                type: Sequelize.SMALLINT
+              },
+              rate30OffShore: {
+                field: 'rate30_off_shore',
+                type: Sequelize.SMALLINT
+              },
+              rate20Global: {
+                field: 'rate20_global',
+                type: Sequelize.SMALLINT
+              },
+              rate20InCountry: {
+                field: 'rate20_in_country',
+                type: Sequelize.SMALLINT
+              },
+              rate20OffShore: {
+                field: 'rate20_off_shore',
+                type: Sequelize.SMALLINT
+              }
+            }),
+            allowNull: false
+          }),
+          allowNull: false
+        },
+        numberOfMembers: {
+          field: 'number_of_members',
+          type: Sequelize.NUMERIC
+        },
+        numberOfMembersAvailable: {
+          field: 'number_of_members_available',
+          type: Sequelize.SMALLINT
+        },
+        imageUrl: {
+          field: 'image_url',
+          type: Sequelize.STRING(255)
+        },
+        timeToCandidate: {
+          field: 'time_to_candidate',
+          type: Sequelize.SMALLINT
+        },
+        timeToInterview: {
+          field: 'time_to_interview',
+          type: Sequelize.SMALLINT
+        },
+        createdBy: {
+          field: 'created_by',
+          type: Sequelize.UUID,
+          allowNull: false
+        },
+        updatedBy: {
+          field: 'updated_by',
+          type: Sequelize.UUID
+        },
+        createdAt: {
+          field: 'created_at',
+          type: Sequelize.DATE
+        },
+        updatedAt: {
+          field: 'updated_at',
+          type: Sequelize.DATE
+        },
+        deletedAt: {
+          field: 'deleted_at',
+          type: Sequelize.DATE
+        }
+      }, {
+        schema: config.DB_SCHEMA_NAME,
+        transaction
+      })
+      await queryInterface.addIndex(
+        {
+          tableName: 'roles',
+          schema: config.DB_SCHEMA_NAME
+        },
+        ['name'],
+        {
+          type: 'UNIQUE',
+          where: { deleted_at: null },
+          transaction: transaction
+        }
+      )
+      await transaction.commit()
+    } catch (err) {
+      await transaction.rollback()
+      throw err
+    }
+  },
+  down: async (queryInterface, Sequelize) => {
+    await queryInterface.dropTable({
+      tableName: 'roles',
+      schema: config.DB_SCHEMA_NAME
+    })
+  }
+}
diff --git a/migrations/2021-05-27-2-job-add-roleIds-field.js b/migrations/2021-05-27-2-job-add-roleIds-field.js
new file mode 100644
index 0000000..a5b9f4b
--- /dev/null
+++ b/migrations/2021-05-27-2-job-add-roleIds-field.js
@@ -0,0 +1,19 @@
+const config = require('config')
+
+/*
+ * Add roleIds field to the Job model.
+ */
+
+module.exports = {
+  up: async (queryInterface, Sequelize) => {
+    await queryInterface.addColumn({ tableName: 'jobs', schema: config.DB_SCHEMA_NAME }, 'role_ids',
+      {
+        type: Sequelize.ARRAY({
+          type: Sequelize.UUID
+        })
+      })
+  },
+  down: async (queryInterface, Sequelize) => {
+    await queryInterface.removeColumn({ tableName: 'jobs', schema: config.DB_SCHEMA_NAME }, 'role_ids')
+  }
+}
diff --git a/package.json b/package.json
index 0fa24cc..510504f 100644
--- a/package.json
+++ b/package.json
@@ -15,6 +15,7 @@
     "index:jobs": "node scripts/es/reIndexJobs.js",
     "index:job-candidates": "node scripts/es/reIndexJobCandidates.js",
     "index:resource-bookings": "node scripts/es/reIndexResourceBookings.js",
+    "index:roles": "node scripts/es/reIndexRoles.js",
     "data:export": "node scripts/data/exportData.js",
     "data:import": "node scripts/data/importData.js",
     "migrate": "npx sequelize db:migrate",
diff --git a/scripts/data/exportData.js b/scripts/data/exportData.js
index 4eee1ad..cb61e58 100644
--- a/scripts/data/exportData.js
+++ b/scripts/data/exportData.js
@@ -28,7 +28,7 @@ const resourceBookingModelOpts = {
 
 const filePath = helper.getParamFromCliArgs() || config.DEFAULT_DATA_FILE_PATH
 const userPrompt = `WARNING: are you sure you want to export all data in the database to a json file with the path ${filePath}? This will overwrite the file.`
-const dataModels = ['Job', jobCandidateModelOpts, resourceBookingModelOpts]
+const dataModels = ['Job', jobCandidateModelOpts, resourceBookingModelOpts, 'Role']
 
 async function exportData () {
   await helper.promptUser(userPrompt, async () => {
diff --git a/scripts/data/importData.js b/scripts/data/importData.js
index 2e9c168..a0aeeb6 100644
--- a/scripts/data/importData.js
+++ b/scripts/data/importData.js
@@ -28,7 +28,7 @@ const resourceBookingModelOpts = {
 
 const filePath = helper.getParamFromCliArgs() || config.DEFAULT_DATA_FILE_PATH
 const userPrompt = `WARNING: this would remove existing data. Are you sure you want to import data from a json file with the path ${filePath}?`
-const dataModels = ['Job', jobCandidateModelOpts, resourceBookingModelOpts]
+const dataModels = ['Job', jobCandidateModelOpts, resourceBookingModelOpts, 'Role']
 
 async function importData () {
   await helper.promptUser(userPrompt, async () => {
diff --git a/scripts/es/createIndex.js b/scripts/es/createIndex.js
index d2c7294..269cd5a 100644
--- a/scripts/es/createIndex.js
+++ b/scripts/es/createIndex.js
@@ -8,7 +8,8 @@ const helper = require('../../src/common/helper')
 const indices = [
   config.get('esConfig.ES_INDEX_JOB'),
   config.get('esConfig.ES_INDEX_JOB_CANDIDATE'),
-  config.get('esConfig.ES_INDEX_RESOURCE_BOOKING')
+  config.get('esConfig.ES_INDEX_RESOURCE_BOOKING'),
+  config.get('esConfig.ES_INDEX_ROLE')
 ]
 const userPrompt = `WARNING: Are you sure want to create the following elasticsearch indices: ${indices}?`
 
diff --git a/scripts/es/deleteIndex.js b/scripts/es/deleteIndex.js
index 6e30995..724d355 100644
--- a/scripts/es/deleteIndex.js
+++ b/scripts/es/deleteIndex.js
@@ -8,7 +8,8 @@ const helper = require('../../src/common/helper')
 const indices = [
   config.get('esConfig.ES_INDEX_JOB'),
   config.get('esConfig.ES_INDEX_JOB_CANDIDATE'),
-  config.get('esConfig.ES_INDEX_RESOURCE_BOOKING')
+  config.get('esConfig.ES_INDEX_RESOURCE_BOOKING'),
+  config.get('esConfig.ES_INDEX_ROLE')
 ]
 const userPrompt = `WARNING: this would remove existent data! Are you sure want to delete the following eleasticsearch indices: ${indices}?`
 
diff --git a/scripts/es/reIndexAll.js b/scripts/es/reIndexAll.js
index 802695d..0367be1 100644
--- a/scripts/es/reIndexAll.js
+++ b/scripts/es/reIndexAll.js
@@ -34,6 +34,7 @@ async function indexAll () {
       await helper.indexBulkDataToES('Job', config.get('esConfig.ES_INDEX_JOB'), logger)
       await helper.indexBulkDataToES(jobCandidateModelOpts, config.get('esConfig.ES_INDEX_JOB_CANDIDATE'), logger)
       await helper.indexBulkDataToES(resourceBookingModelOpts, config.get('esConfig.ES_INDEX_RESOURCE_BOOKING'), logger)
+      await helper.indexBulkDataToES('Role', config.get('esConfig.ES_INDEX_ROLE'), logger)
       process.exit(0)
     } catch (err) {
       logger.logFullError(err, { component: 'indexAll' })
diff --git a/scripts/es/reIndexRoles.js b/scripts/es/reIndexRoles.js
new file mode 100644
index 0000000..a4507aa
--- /dev/null
+++ b/scripts/es/reIndexRoles.js
@@ -0,0 +1,37 @@
+/**
+ * Reindex Roles data in Elasticsearch using data from database
+ */
+const config = require('config')
+const logger = require('../../src/common/logger')
+const helper = require('../../src/common/helper')
+
+const roleId = helper.getParamFromCliArgs()
+const index = config.get('esConfig.ES_INDEX_ROLE')
+const reIndexAllRolesPrompt = `WARNING: this would remove existent data! Are you sure you want to reindex the index ${index}?`
+const reIndexRolePrompt = `WARNING: this would remove existent data! Are you sure you want to reindex the document with id ${roleId} in index ${index}?`
+
+async function reIndexRoles () {
+  if (roleId === null) {
+    await helper.promptUser(reIndexAllRolesPrompt, async () => {
+      try {
+        await helper.indexBulkDataToES('Role', index, logger)
+        process.exit(0)
+      } catch (err) {
+        logger.logFullError(err, { component: 'reIndexRoles' })
+        process.exit(1)
+      }
+    })
+  } else {
+    await helper.promptUser(reIndexRolePrompt, async () => {
+      try {
+        await helper.indexDataToEsById(roleId, 'Role', index, logger)
+        process.exit(0)
+      } catch (err) {
+        logger.logFullError(err, { component: 'reIndexRoles' })
+        process.exit(1)
+      }
+    })
+  }
+}
+
+reIndexRoles()
diff --git a/src/bootstrap.js b/src/bootstrap.js
index 2999f13..896e6c9 100644
--- a/src/bootstrap.js
+++ b/src/bootstrap.js
@@ -16,7 +16,7 @@ Joi.rateType = () => Joi.string().valid('hourly', 'daily', 'weekly', 'monthly')
 Joi.jobStatus = () => Joi.string().valid('sourcing', 'in-review', 'assigned', 'closed', 'cancelled')
 Joi.resourceBookingStatus = () => Joi.string().valid('placed', 'closed', 'cancelled')
 Joi.workload = () => Joi.string().valid('full-time', 'fractional')
-Joi.jobCandidateStatus = () => Joi.string().valid('open', 'placed', 'selected', 'client rejected - screening', 'client rejected - interview', 'rejected - other', 'cancelled', 'interview', 'topcoder-rejected', 'applied','rejected-pre-screen','skills-test','skills-test','phone-screen','job-closed')
+Joi.jobCandidateStatus = () => Joi.string().valid('open', 'placed', 'selected', 'client rejected - screening', 'client rejected - interview', 'rejected - other', 'cancelled', 'interview', 'topcoder-rejected', 'applied', 'rejected-pre-screen', 'skills-test', 'skills-test', 'phone-screen', 'job-closed')
 Joi.title = () => Joi.string().max(128)
 Joi.paymentStatus = () => Joi.string().valid('pending', 'partially-completed', 'completed', 'cancelled')
 Joi.xaiTemplate = () => Joi.string().valid(...allowedXAITemplate)
@@ -26,6 +26,7 @@ Joi.workPeriodPaymentStatus = () => Joi.string().valid('completed', 'cancelled')
 // See https://joi.dev/api/?v=17.3.0#string fro details why it's like this.
 // In many cases we would like to allow empty string to make it easier to create UI for editing data.
 Joi.stringAllowEmpty = () => Joi.string().allow('')
+Joi.smallint = () => Joi.number().min(-32768).max(32767)
 
 function buildServices (dir) {
   const files = fs.readdirSync(dir)
diff --git a/src/common/helper.js b/src/common/helper.js
index 0ce1190..66cf32d 100644
--- a/src/common/helper.js
+++ b/src/common/helper.js
@@ -2,50 +2,50 @@
  * This file defines helper methods
  */
 
-const fs = require('fs');
-const querystring = require('querystring');
-const Confirm = require('prompt-confirm');
-const Bottleneck = require('bottleneck');
-const AWS = require('aws-sdk');
-const config = require('config');
-const HttpStatus = require('http-status-codes');
-const _ = require('lodash');
-const request = require('superagent');
-const elasticsearch = require('@elastic/elasticsearch');
+const fs = require('fs')
+const querystring = require('querystring')
+const Confirm = require('prompt-confirm')
+const Bottleneck = require('bottleneck')
+const AWS = require('aws-sdk')
+const config = require('config')
+const HttpStatus = require('http-status-codes')
+const _ = require('lodash')
+const request = require('superagent')
+const elasticsearch = require('@elastic/elasticsearch')
 const {
-  ResponseError: ESResponseError,
-} = require('@elastic/elasticsearch/lib/errors');
-const errors = require('../common/errors');
-const logger = require('./logger');
-const models = require('../models');
-const eventDispatcher = require('./eventDispatcher');
-const busApi = require('@topcoder-platform/topcoder-bus-api-wrapper');
-const moment = require('moment');
+  ResponseError: ESResponseError
+} = require('@elastic/elasticsearch/lib/errors')
+const errors = require('../common/errors')
+const logger = require('./logger')
+const models = require('../models')
+const eventDispatcher = require('./eventDispatcher')
+const busApi = require('@topcoder-platform/topcoder-bus-api-wrapper')
+const moment = require('moment')
 
 const localLogger = {
   debug: (message) =>
     logger.debug({
       component: 'helper',
       context: message.context,
-      message: message.message,
+      message: message.message
     }),
   error: (message) =>
     logger.error({
       component: 'helper',
       context: message.context,
-      message: message.message,
+      message: message.message
     }),
   info: (message) =>
     logger.info({
       component: 'helper',
       context: message.context,
-      message: message.message,
-    }),
-};
+      message: message.message
+    })
+}
 
-AWS.config.region = config.esConfig.AWS_REGION;
+AWS.config.region = config.esConfig.AWS_REGION
 
-const m2mAuth = require('tc-core-library-js').auth.m2m;
+const m2mAuth = require('tc-core-library-js').auth.m2m
 
 const m2m = m2mAuth(
   _.pick(config, [
@@ -53,9 +53,9 @@ const m2m = m2mAuth(
     'AUTH0_AUDIENCE',
     'AUTH0_CLIENT_ID',
     'AUTH0_CLIENT_SECRET',
-    'AUTH0_PROXY_SERVER_URL',
+    'AUTH0_PROXY_SERVER_URL'
   ])
-);
+)
 
 const m2mForUbahn = m2mAuth({
   AUTH0_AUDIENCE: config.AUTH0_AUDIENCE_UBAHN,
@@ -64,20 +64,20 @@ const m2mForUbahn = m2mAuth({
     'TOKEN_CACHE_TIME',
     'AUTH0_CLIENT_ID',
     'AUTH0_CLIENT_SECRET',
-    'AUTH0_PROXY_SERVER_URL',
-  ]),
-});
+    'AUTH0_PROXY_SERVER_URL'
+  ])
+})
 
-let busApiClient;
+let busApiClient
 
 /**
  * Get bus api client.
  *
  * @returns {Object} the bus api client
  */
-function getBusApiClient() {
+function getBusApiClient () {
   if (busApiClient) {
-    return busApiClient;
+    return busApiClient
   }
   busApiClient = busApi(
     _.pick(config, [
@@ -88,17 +88,17 @@ function getBusApiClient() {
       'AUTH0_CLIENT_SECRET',
       'BUSAPI_URL',
       'KAFKA_ERROR_TOPIC',
-      'AUTH0_PROXY_SERVER_URL',
+      'AUTH0_PROXY_SERVER_URL'
     ])
-  );
-  return busApiClient;
+  )
+  return busApiClient
 }
 
 // ES Client mapping
-const esClients = {};
+const esClients = {}
 
 // The es index property mapping
-const esIndexPropertyMapping = {};
+const esIndexPropertyMapping = {}
 esIndexPropertyMapping[config.get('esConfig.ES_INDEX_JOB')] = {
   projectId: { type: 'integer' },
   externalId: { type: 'keyword' },
@@ -113,11 +113,12 @@ esIndexPropertyMapping[config.get('esConfig.ES_INDEX_JOB')] = {
   skills: { type: 'keyword' },
   status: { type: 'keyword' },
   isApplicationPageActive: { type: 'boolean' },
+  roleIds: { type: 'keyword' },
   createdAt: { type: 'date' },
   createdBy: { type: 'keyword' },
   updatedAt: { type: 'date' },
-  updatedBy: { type: 'keyword' },
-};
+  updatedBy: { type: 'keyword' }
+}
 esIndexPropertyMapping[config.get('esConfig.ES_INDEX_JOB_CANDIDATE')] = {
   jobId: { type: 'keyword' },
   userId: { type: 'keyword' },
@@ -150,14 +151,14 @@ esIndexPropertyMapping[config.get('esConfig.ES_INDEX_JOB_CANDIDATE')] = {
       createdBy: { type: 'keyword' },
       updatedAt: { type: 'date' },
       updatedBy: { type: 'keyword' },
-      deletedAt: { type: 'date' },
-    },
+      deletedAt: { type: 'date' }
+    }
   },
   createdAt: { type: 'date' },
   createdBy: { type: 'keyword' },
   updatedAt: { type: 'date' },
-  updatedBy: { type: 'keyword' },
-};
+  updatedBy: { type: 'keyword' }
+}
 esIndexPropertyMapping[config.get('esConfig.ES_INDEX_RESOURCE_BOOKING')] = {
   projectId: { type: 'integer' },
   userId: { type: 'keyword' },
@@ -195,32 +196,59 @@ esIndexPropertyMapping[config.get('esConfig.ES_INDEX_RESOURCE_BOOKING')] = {
           createdAt: { type: 'date' },
           createdBy: { type: 'keyword' },
           updatedAt: { type: 'date' },
-          updatedBy: { type: 'keyword' },
-        },
+          updatedBy: { type: 'keyword' }
+        }
       },
       createdAt: { type: 'date' },
       createdBy: { type: 'keyword' },
       updatedAt: { type: 'date' },
-      updatedBy: { type: 'keyword' },
-    },
+      updatedBy: { type: 'keyword' }
+    }
+  },
+  createdAt: { type: 'date' },
+  createdBy: { type: 'keyword' },
+  updatedAt: { type: 'date' },
+  updatedBy: { type: 'keyword' }
+}
+esIndexPropertyMapping[config.get('esConfig.ES_INDEX_ROLE')] = {
+  name: { type: 'keyword' },
+  description: { type: 'keyword' },
+  listOfSkills: { type: 'keyword' },
+  rates: {
+    properties: {
+      global: { type: 'integer' },
+      inCountry: { type: 'integer' },
+      offShore: { type: 'integer' },
+      rate30Global: { type: 'integer' },
+      rate30InCountry: { type: 'integer' },
+      rate30OffShore: { type: 'integer' },
+      rate20Global: { type: 'integer' },
+      rate20InCountry: { type: 'integer' },
+      rate20OffShore: { type: 'integer' }
+    }
   },
+  numberOfMembers: { type: 'integer' },
+  numberOfMembersAvailable: { type: 'integer' },
+  imageUrl: { type: 'keyword' },
+  timeToCandidate: { type: 'integer' },
+  timeToInterview: { type: 'integer' },
   createdAt: { type: 'date' },
   createdBy: { type: 'keyword' },
   updatedAt: { type: 'date' },
-  updatedBy: { type: 'keyword' },
-};
+  updatedBy: { type: 'keyword' }
+}
 
 /**
  * Get the first parameter from cli arguments
  */
-function getParamFromCliArgs() {
-  const filteredArgs = process.argv.filter((arg) => !arg.includes('--'));
+function getParamFromCliArgs () {
+  const filteredArgs = process.argv.filter((arg) => !arg.includes('--'))
 
   if (filteredArgs.length > 2) {
-    return filteredArgs[2];
+    return filteredArgs[2]
   }
 
-  return null;
+  return null
 }
 
 /**
@@ -228,18 +256,18 @@ function getParamFromCliArgs() {
  * @param {string} promptQuery the query to ask the user
  * @param {function} cb the callback function
  */
-async function promptUser(promptQuery, cb) {
+async function promptUser (promptQuery, cb) {
   if (process.argv.includes('--force')) {
-    await cb();
-    return;
+    await cb()
+    return
   }
 
-  const prompt = new Confirm(promptQuery);
+  const prompt = new Confirm(promptQuery)
   prompt.ask(async (answer) => {
     if (answer) {
-      await cb();
+      await cb()
     }
-  });
+  })
 }
 
 /**
@@ -248,23 +276,23 @@ async function promptUser(promptQuery, cb) {
  * @param {Object} logger the logger object
  * @param {Object} esClient the elasticsearch client (optional, will create if not given)
  */
-async function createIndex(index, logger, esClient = null) {
+async function createIndex (index, logger, esClient = null) {
   if (!esClient) {
-    esClient = getESClient();
+    esClient = getESClient()
   }
 
   await esClient.indices.create({
     index,
     body: {
       mappings: {
-        properties: esIndexPropertyMapping[index],
-      },
-    },
-  });
+        properties: esIndexPropertyMapping[index]
+      }
+    }
+  })
   logger.info({
     component: 'createIndex',
-    message: `ES Index ${index} creation succeeded!`,
-  });
+    message: `ES Index ${index} creation succeeded!`
+  })
 }
 
 /**
@@ -273,45 +301,45 @@ async function createIndex(index, logger, esClient = null) {
  * @param {Object} logger the logger object
  * @param {Object} esClient the elasticsearch client (optional, will create if not given)
  */
-async function deleteIndex(index, logger, esClient = null) {
+async function deleteIndex (index, logger, esClient = null) {
   if (!esClient) {
-    esClient = getESClient();
+    esClient = getESClient()
   }
 
-  await esClient.indices.delete({ index });
+  await esClient.indices.delete({ index })
   logger.info({
     component: 'deleteIndex',
-    message: `ES Index ${index} deletion succeeded!`,
-  });
+    message: `ES Index ${index} deletion succeeded!`
+  })
 }
 
 /**
  * Split data into bulks
  * @param {Array} data the array of data to split
  */
-function getBulksFromDocuments(data) {
-  const maxBytes = config.get('esConfig.MAX_BULK_REQUEST_SIZE_MB') * 1e6;
-  const bulks = [];
-  let documentIndex = 0;
-  let currentBulkSize = 0;
-  let currentBulk = [];
+function getBulksFromDocuments (data) {
+  const maxBytes = config.get('esConfig.MAX_BULK_REQUEST_SIZE_MB') * 1e6
+  const bulks = []
+  let documentIndex = 0
+  let currentBulkSize = 0
+  let currentBulk = []
 
   while (true) {
     // break loop when parsed all documents
     if (documentIndex >= data.length) {
-      bulks.push(currentBulk);
-      break;
+      bulks.push(currentBulk)
+      break
     }
 
     // check if current document size is greater than the max bulk size, if so, throw error
     const currentDocumentSize = Buffer.byteLength(
       JSON.stringify(data[documentIndex]),
       'utf-8'
-    );
+    )
     if (maxBytes < currentDocumentSize) {
       throw new Error(
         `Document with id ${data[documentIndex]} has size ${currentDocumentSize}, which is greater than the max bulk size, ${maxBytes}. Consider increasing the max bulk size.`
-      );
+      )
     }
 
     if (
@@ -320,17 +348,17 @@ function getBulksFromDocuments(data) {
     ) {
       // if adding the current document goes over the max bulk size OR goes over max number of docs
       // then push the current bulk to bulks array and reset the current bulk
-      bulks.push(currentBulk);
-      currentBulk = [];
-      currentBulkSize = 0;
+      bulks.push(currentBulk)
+      currentBulk = []
+      currentBulkSize = 0
     } else {
       // otherwise, add document to current bulk
-      currentBulk.push(data[documentIndex]);
-      currentBulkSize += currentDocumentSize;
-      documentIndex++;
+      currentBulk.push(data[documentIndex])
+      currentBulkSize += currentDocumentSize
+      documentIndex++
     }
   }
-  return bulks;
+  return bulks
 }
 
 /**
@@ -339,57 +367,57 @@ function getBulksFromDocuments(data) {
  * @param {Object} indexName the index name
  * @param {Object} logger the logger object
  */
-async function indexBulkDataToES(modelOpts, indexName, logger) {
-  const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName;
-  const include = _.get(modelOpts, 'include', []);
+async function indexBulkDataToES (modelOpts, indexName, logger) {
+  const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName
+  const include = _.get(modelOpts, 'include', [])
 
   logger.info({
     component: 'indexBulkDataToES',
-    message: `Reindexing of ${modelName}s started!`,
-  });
+    message: `Reindexing of ${modelName}s started!`
+  })
 
-  const esClient = getESClient();
+  const esClient = getESClient()
 
   // clear index
-  const indexExistsRes = await esClient.indices.exists({ index: indexName });
+  const indexExistsRes = await esClient.indices.exists({ index: indexName })
   if (indexExistsRes.statusCode !== 404) {
-    await deleteIndex(indexName, logger, esClient);
+    await deleteIndex(indexName, logger, esClient)
   }
-  await createIndex(indexName, logger, esClient);
+  await createIndex(indexName, logger, esClient)
 
   // get data from db
   logger.info({
     component: 'indexBulkDataToES',
-    message: 'Getting data from database',
-  });
-  const model = models[modelName];
-  const data = await model.findAll({ include });
-  const rawObjects = _.map(data, (r) => r.toJSON());
+    message: 'Getting data from database'
+  })
+  const model = models[modelName]
+  const data = await model.findAll({ include })
+  const rawObjects = _.map(data, (r) => r.toJSON())
   if (_.isEmpty(rawObjects)) {
     logger.info({
       component: 'indexBulkDataToES',
-      message: `No data in database for ${modelName}`,
-    });
-    return;
+      message: `No data in database for ${modelName}`
+    })
+    return
   }
-  const bulks = getBulksFromDocuments(rawObjects);
+  const bulks = getBulksFromDocuments(rawObjects)
 
-  const startTime = Date.now();
-  let doneCount = 0;
+  const startTime = Date.now()
+  let doneCount = 0
   for (const bulk of bulks) {
     // send bulk to esclient
     const body = bulk.flatMap((doc) => [
       { index: { _index: indexName, _id: doc.id } },
-      doc,
-    ]);
-    await esClient.bulk({ refresh: true, body });
-    doneCount += bulk.length;
+      doc
+    ])
+    await esClient.bulk({ refresh: true, body })
+    doneCount += bulk.length
 
     // log metrics
-    const timeSpent = Date.now() - startTime;
-    const avgTimePerDocument = timeSpent / doneCount;
-    const estimatedLength = avgTimePerDocument * data.length;
-    const timeLeft = startTime + estimatedLength - Date.now();
+    const timeSpent = Date.now() - startTime
+    const avgTimePerDocument = timeSpent / doneCount
+    const estimatedLength = avgTimePerDocument * data.length
+    const timeLeft = startTime + estimatedLength - Date.now()
     logger.info({
       component: 'indexBulkDataToES',
       message: `Processed ${doneCount} of ${
@@ -398,8 +426,8 @@ async function indexBulkDataToES(modelOpts, indexName, logger) {
         avgTimePerDocument
       )}, time spent: ${formatTime(timeSpent)}, time left: ${formatTime(
         timeLeft
-      )}`,
-    });
+      )}`
+    })
   }
 }
 
@@ -410,36 +438,36 @@ async function indexBulkDataToES(modelOpts, indexName, logger) {
  * @param {string} id the job id
  * @param {Object} logger the logger object
  */
-async function indexDataToEsById(id, modelOpts, indexName, logger) {
-  const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName;
-  const include = _.get(modelOpts, 'include', []);
+async function indexDataToEsById (id, modelOpts, indexName, logger) {
+  const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName
+  const include = _.get(modelOpts, 'include', [])
 
   logger.info({
     component: 'indexDataToEsById',
-    message: `Reindexing of ${modelName} with id ${id} started!`,
-  });
-  const esClient = getESClient();
+    message: `Reindexing of ${modelName} with id ${id} started!`
+  })
+  const esClient = getESClient()
 
   logger.info({
     component: 'indexDataToEsById',
-    message: 'Getting data from database',
-  });
-  const model = models[modelName];
+    message: 'Getting data from database'
+  })
+  const model = models[modelName]
 
-  const data = await model.findById(id, include);
+  const data = await model.findById(id, include)
   logger.info({
     component: 'indexDataToEsById',
-    message: 'Indexing data into Elasticsearch',
-  });
+    message: 'Indexing data into Elasticsearch'
+  })
   await esClient.index({
     index: indexName,
     id: id,
-    body: data.dataValues,
-  });
+    body: data.dataValues
+  })
   logger.info({
     component: 'indexDataToEsById',
-    message: 'Indexing complete!',
-  });
+    message: 'Indexing complete!'
+  })
 }
 
 /**
@@ -448,68 +476,68 @@ async function indexDataToEsById(id, modelOpts, indexName, logger) {
  * @param {Array} dataModels the data models to import
  * @param {Object} logger the logger object
  */
-async function importData(pathToFile, dataModels, logger) {
+async function importData (pathToFile, dataModels, logger) {
   // check if file exists
   if (!fs.existsSync(pathToFile)) {
-    throw new Error(`File with path ${pathToFile} does not exist`);
+    throw new Error(`File with path ${pathToFile} does not exist`)
   }
 
   // clear database
-  logger.info({ component: 'importData', message: 'Clearing database...' });
-  await models.sequelize.sync({ force: true });
+  logger.info({ component: 'importData', message: 'Clearing database...' })
+  await models.sequelize.sync({ force: true })
 
-  let transaction = null;
-  let currentModelName = null;
+  let transaction = null
+  let currentModelName = null
   try {
     // Start a transaction
-    transaction = await models.sequelize.transaction();
-    const jsonData = JSON.parse(fs.readFileSync(pathToFile).toString());
+    transaction = await models.sequelize.transaction()
+    const jsonData = JSON.parse(fs.readFileSync(pathToFile).toString())
 
     for (let index = 0; index < dataModels.length; index += 1) {
-      const modelOpts = dataModels[index];
-      const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName;
-      const include = _.get(modelOpts, 'include', []);
+      const modelOpts = dataModels[index]
+      const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName
+      const include = _.get(modelOpts, 'include', [])
 
-      currentModelName = modelName;
-      const model = models[modelName];
-      const modelRecords = jsonData[modelName];
+      currentModelName = modelName
+      const model = models[modelName]
+      const modelRecords = jsonData[modelName]
 
       if (modelRecords && modelRecords.length > 0) {
         logger.info({
           component: 'importData',
-          message: `Importing data for model: ${modelName}`,
-        });
+          message: `Importing data for model: ${modelName}`
+        })
 
-        await model.bulkCreate(modelRecords, { include, transaction });
+        await model.bulkCreate(modelRecords, { include, transaction })
         logger.info({
           component: 'importData',
-          message: `Records imported for model: ${modelName} = ${modelRecords.length}`,
-        });
+          message: `Records imported for model: ${modelName} = ${modelRecords.length}`
+        })
       } else {
         logger.info({
           component: 'importData',
-          message: `No records to import for model: ${modelName}`,
-        });
+          message: `No records to import for model: ${modelName}`
+        })
       }
     }
     // commit transaction only if all things went ok
     logger.info({
       component: 'importData',
-      message: 'committing transaction to database...',
-    });
-    await transaction.commit();
+      message: 'committing transaction to database...'
+    })
+    await transaction.commit()
   } catch (error) {
     logger.error({
       component: 'importData',
-      message: `Error while writing data of model: ${currentModelName}`,
-    });
+      message: `Error while writing data of model: ${currentModelName}`
+    })
     // rollback all insert operations
     if (transaction) {
       logger.info({
         component: 'importData',
-        message: 'rollback database transaction...',
-      });
-      transaction.rollback();
+        message: 'rollback database transaction...'
+      })
+      transaction.rollback()
     }
     if (error.name && error.errors && error.fields) {
       // For sequelize validation errors, we throw only fields with data that helps in debugging error,
@@ -519,11 +547,11 @@ async function importData(pathToFile, dataModels, logger) {
           modelName: currentModelName,
           name: error.name,
           errors: error.errors,
-          fields: error.fields,
+          fields: error.fields
         })
-      );
+      )
     } else {
-      throw error;
+      throw error
     }
   }
 
@@ -533,10 +561,10 @@ async function importData(pathToFile, dataModels, logger) {
     include: [
       {
         model: models.Interview,
-        as: 'interviews',
-      },
-    ],
-  };
+        as: 'interviews'
+      }
+    ]
+  }
   const resourceBookingModelOpts = {
     modelName: 'ResourceBooking',
     include: [
@@ -546,23 +574,24 @@ async function importData(pathToFile, dataModels, logger) {
         include: [
           {
             model: models.WorkPeriodPayment,
-            as: 'payments',
-          },
-        ],
-      },
-    ],
-  };
-  await indexBulkDataToES('Job', config.get('esConfig.ES_INDEX_JOB'), logger);
+            as: 'payments'
+          }
+        ]
+      }
+    ]
+  }
+  await indexBulkDataToES('Job', config.get('esConfig.ES_INDEX_JOB'), logger)
   await indexBulkDataToES(
     jobCandidateModelOpts,
     config.get('esConfig.ES_INDEX_JOB_CANDIDATE'),
     logger
-  );
+  )
   await indexBulkDataToES(
     resourceBookingModelOpts,
     config.get('esConfig.ES_INDEX_RESOURCE_BOOKING'),
     logger
-  );
+  )
+  await indexBulkDataToES('Role', config.get('esConfig.ES_INDEX_ROLE'), logger)
 }
 
 /**
@@ -571,74 +600,74 @@ async function importData(pathToFile, dataModels, logger) {
  * @param {Array} dataModels the data models to export
  * @param {Object} logger the logger object
  */
-async function exportData(pathToFile, dataModels, logger) {
+async function exportData (pathToFile, dataModels, logger) {
   logger.info({
     component: 'exportData',
-    message: `Start Saving data to file with path ${pathToFile}....`,
-  });
+    message: `Start Saving data to file with path ${pathToFile}....`
+  })
 
-  const allModelsRecords = {};
+  const allModelsRecords = {}
   for (let index = 0; index < dataModels.length; index += 1) {
-    const modelOpts = dataModels[index];
-    const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName;
-    const include = _.get(modelOpts, 'include', []);
-    const modelRecords = await models[modelName].findAll({ include });
-    const rawRecords = _.map(modelRecords, (r) => r.toJSON());
-    allModelsRecords[modelName] = rawRecords;
+    const modelOpts = dataModels[index]
+    const modelName = _.isString(modelOpts) ? modelOpts : modelOpts.modelName
+    const include = _.get(modelOpts, 'include', [])
+    const modelRecords = await models[modelName].findAll({ include })
+    const rawRecords = _.map(modelRecords, (r) => r.toJSON())
+    allModelsRecords[modelName] = rawRecords
     logger.info({
       component: 'exportData',
-      message: `Records loaded for model: ${modelName} = ${rawRecords.length}`,
-    });
+      message: `Records loaded for model: ${modelName} = ${rawRecords.length}`
+    })
   }
 
-  fs.writeFileSync(pathToFile, JSON.stringify(allModelsRecords));
+  fs.writeFileSync(pathToFile, JSON.stringify(allModelsRecords))
   logger.info({
     component: 'exportData',
-    message: 'End Saving data to file....',
-  });
+    message: 'End Saving data to file....'
+  })
 }
 
 /**
  * Format a time in milliseconds into a human readable format
  * @param {Date} milliseconds the number of milliseconds
  */
-function formatTime(millisec) {
-  const ms = Math.floor(millisec % 1000);
-  const secs = Math.floor((millisec / 1000) % 60);
-  const mins = Math.floor((millisec / (1000 * 60)) % 60);
-  const hrs = Math.floor((millisec / (1000 * 60 * 60)) % 24);
-  const days = Math.floor((millisec / (1000 * 60 * 60 * 24)) % 7);
-  const weeks = Math.floor((millisec / (1000 * 60 * 60 * 24 * 7)) % 4);
-  const mnths = Math.floor((millisec / (1000 * 60 * 60 * 24 * 7 * 4)) % 12);
-  const yrs = Math.floor(millisec / (1000 * 60 * 60 * 24 * 7 * 4 * 12));
-
-  let formattedTime = '0 milliseconds';
+function formatTime (millisec) {
+  const ms = Math.floor(millisec % 1000)
+  const secs = Math.floor((millisec / 1000) % 60)
+  const mins = Math.floor((millisec / (1000 * 60)) % 60)
+  const hrs = Math.floor((millisec / (1000 * 60 * 60)) % 24)
+  const days = Math.floor((millisec / (1000 * 60 * 60 * 24)) % 7)
+  const weeks = Math.floor((millisec / (1000 * 60 * 60 * 24 * 7)) % 4)
+  const mnths = Math.floor((millisec / (1000 * 60 * 60 * 24 * 7 * 4)) % 12)
+  const yrs = Math.floor(millisec / (1000 * 60 * 60 * 24 * 7 * 4 * 12))
+
+  let formattedTime = '0 milliseconds'
   if (ms > 0) {
-    formattedTime = `${ms} milliseconds`;
+    formattedTime = `${ms} milliseconds`
   }
   if (secs > 0) {
-    formattedTime = `${secs} seconds ${formattedTime}`;
+    formattedTime = `${secs} seconds ${formattedTime}`
   }
   if (mins > 0) {
-    formattedTime = `${mins} minutes ${formattedTime}`;
+    formattedTime = `${mins} minutes ${formattedTime}`
   }
   if (hrs > 0) {
-    formattedTime = `${hrs} hours ${formattedTime}`;
+    formattedTime = `${hrs} hours ${formattedTime}`
   }
   if (days > 0) {
-    formattedTime = `${days} days ${formattedTime}`;
+    formattedTime = `${days} days ${formattedTime}`
   }
   if (weeks > 0) {
-    formattedTime = `${weeks} weeks ${formattedTime}`;
+    formattedTime = `${weeks} weeks ${formattedTime}`
   }
   if (mnths > 0) {
-    formattedTime = `${mnths} months ${formattedTime}`;
+    formattedTime = `${mnths} months ${formattedTime}`
   }
   if (yrs > 0) {
-    formattedTime = `${yrs} years ${formattedTime}`;
+    formattedTime = `${yrs} years ${formattedTime}`
   }
 
-  return formattedTime.trim();
+  return formattedTime.trim()
 }
 
 /**
@@ -647,30 +676,30 @@ function formatTime(millisec) {
  * @param {Array} source the array in which to search for the term
  * @param {Array | String} term the term to search
  */
-function checkIfExists(source, term) {
-  let terms;
+function checkIfExists (source, term) {
+  let terms
 
   if (!_.isArray(source)) {
-    throw new Error('Source argument should be an array');
+    throw new Error('Source argument should be an array')
   }
 
-  source = source.map((s) => s.toLowerCase());
+  source = source.map((s) => s.toLowerCase())
 
   if (_.isString(term)) {
-    terms = term.toLowerCase().split(' ');
+    terms = term.toLowerCase().split(' ')
   } else if (_.isArray(term)) {
-    terms = term.map((t) => t.toLowerCase());
+    terms = term.map((t) => t.toLowerCase())
   } else {
-    throw new Error('Term argument should be either a string or an array');
+    throw new Error('Term argument should be either a string or an array')
   }
 
   for (let i = 0; i < terms.length; i++) {
     if (source.includes(terms[i])) {
-      return true;
+      return true
     }
   }
 
-  return false;
+  return false
 }
 
 /**
@@ -678,10 +707,10 @@ function checkIfExists(source, term) {
  * @param {Function} fn the async function
  * @returns {Function} the wrapped function
  */
-function wrapExpress(fn) {
+function wrapExpress (fn) {
   return function (req, res, next) {
-    fn(req, res, next).catch(next);
-  };
+    fn(req, res, next).catch(next)
+  }
 }
 
 /**
@@ -689,20 +718,20 @@ function wrapExpress(fn) {
  * @param obj the object (controller exports)
  * @returns {Object|Array} the wrapped object
  */
-function autoWrapExpress(obj) {
+function autoWrapExpress (obj) {
   if (_.isArray(obj)) {
-    return obj.map(autoWrapExpress);
+    return obj.map(autoWrapExpress)
   }
   if (_.isFunction(obj)) {
     if (obj.constructor.name === 'AsyncFunction') {
-      return wrapExpress(obj);
+      return wrapExpress(obj)
     }
-    return obj;
+    return obj
   }
   _.each(obj, (value, key) => {
-    obj[key] = autoWrapExpress(value);
-  });
-  return obj;
+    obj[key] = autoWrapExpress(value)
+  })
+  return obj
 }
 
 /**
@@ -711,11 +740,11 @@ function autoWrapExpress(obj) {
  * @param {Number} page the page number
  * @returns {String} link for the page
  */
-function getPageLink(req, page) {
-  const q = _.assignIn({}, req.query, { page });
+function getPageLink (req, page) {
+  const q = _.assignIn({}, req.query, { page })
   return `${req.protocol}://${req.get('Host')}${req.baseUrl}${
     req.path
-  }?${querystring.stringify(q)}`;
+  }?${querystring.stringify(q)}`
 }
 
 /**
@@ -724,31 +753,31 @@ function getPageLink(req, page) {
  * @param {Object} res the HTTP response
  * @param {Object} result the operation result
  */
-function setResHeaders(req, res, result) {
-  const totalPages = Math.ceil(result.total / result.perPage);
+function setResHeaders (req, res, result) {
+  const totalPages = Math.ceil(result.total / result.perPage)
   if (result.page > 1) {
-    res.set('X-Prev-Page', result.page - 1);
+    res.set('X-Prev-Page', result.page - 1)
   }
   if (result.page < totalPages) {
-    res.set('X-Next-Page', result.page + 1);
+    res.set('X-Next-Page', result.page + 1)
   }
-  res.set('X-Page', result.page);
-  res.set('X-Per-Page', result.perPage);
-  res.set('X-Total', result.total);
-  res.set('X-Total-Pages', totalPages);
+  res.set('X-Page', result.page)
+  res.set('X-Per-Page', result.perPage)
+  res.set('X-Total', result.total)
+  res.set('X-Total-Pages', totalPages)
   // set Link header
   if (totalPages > 0) {
     let link = `<${getPageLink(req, 1)}>; rel="first", <${getPageLink(
       req,
       totalPages
-    )}>; rel="last"`;
+    )}>; rel="last"`
     if (result.page > 1) {
-      link += `, <${getPageLink(req, result.page - 1)}>; rel="prev"`;
+      link += `, <${getPageLink(req, result.page - 1)}>; rel="prev"`
     }
     if (result.page < totalPages) {
-      link += `, <${getPageLink(req, result.page + 1)}>; rel="next"`;
+      link += `, <${getPageLink(req, result.page + 1)}>; rel="next"`
     }
-    res.set('Link', link);
+    res.set('Link', link)
   }
 }
 
@@ -756,30 +785,30 @@ function setResHeaders(req, res, result) {
  * Get ES Client
  * @return {Object} Elastic Host Client Instance
  */
-function getESClient() {
+function getESClient () {
   if (esClients.client) {
-    return esClients.client;
+    return esClients.client
   }
 
-  const host = config.esConfig.HOST;
-  const cloudId = config.esConfig.ELASTICCLOUD.id;
+  const host = config.esConfig.HOST
+  const cloudId = config.esConfig.ELASTICCLOUD.id
   if (cloudId) {
     // Elastic Cloud configuration
     esClients.client = new elasticsearch.Client({
       cloud: {
-        id: cloudId,
+        id: cloudId
       },
       auth: {
         username: config.esConfig.ELASTICCLOUD.username,
-        password: config.esConfig.ELASTICCLOUD.password,
-      },
-    });
+        password: config.esConfig.ELASTICCLOUD.password
+      }
+    })
   } else {
     esClients.client = new elasticsearch.Client({
-      node: host,
-    });
+      node: host
+    })
   }
-  return esClients.client;
+  return esClients.client
 }
 
 /*
@@ -790,8 +819,8 @@ const getM2MToken = async () => {
   return await m2m.getMachineToken(
     config.AUTH0_CLIENT_ID,
     config.AUTH0_CLIENT_SECRET
-  );
-};
+  )
+}
 
 /*
  * Function to get M2M token for U-Bahn
@@ -801,8 +830,8 @@ const getM2MUbahnToken = async () => {
   return await m2mForUbahn.getMachineToken(
     config.AUTH0_CLIENT_ID,
     config.AUTH0_CLIENT_SECRET
-  );
-};
+  )
+}
 
 /**
  * Function to encode query string
@@ -810,17 +839,17 @@ const getM2MUbahnToken = async () => {
  * @param {String} nesting the nesting string
  * @returns {String} query string
  */
-function encodeQueryString(queryObj, nesting = '') {
+function encodeQueryString (queryObj, nesting = '') {
   const pairs = Object.entries(queryObj).map(([key, val]) => {
     // Handle the nested, recursive case, where the value to encode is an object itself
     if (typeof val === 'object') {
-      return encodeQueryString(val, nesting + `${key}.`);
+      return encodeQueryString(val, nesting + `${key}.`)
     } else {
       // Handle base case, where the value to encode is simply a string.
-      return [nesting + key, val].map(querystring.escape).join('=');
+      return [nesting + key, val].map(querystring.escape).join('=')
     }
-  });
-  return pairs.join('&');
+  })
+  return pairs.join('&')
 }
 
 /**
@@ -828,31 +857,31 @@ function encodeQueryString(queryObj, nesting = '') {
  * @param {Integer} externalId the legacy user id
  * @returns {Array} the users found
  */
-async function listUsersByExternalId(externalId) {
+async function listUsersByExternalId (externalId) {
   // return empty list if externalId is null or undefined
   if (!!externalId !== true) {
-    return [];
+    return []
   }
 
-  const token = await getM2MUbahnToken();
+  const token = await getM2MUbahnToken()
   const q = {
     enrich: true,
     externalProfile: {
       organizationId: config.ORG_ID,
-      externalId,
-    },
-  };
-  const url = `${config.TC_API}/users?${encodeQueryString(q)}`;
+      externalId
+    }
+  }
+  const url = `${config.TC_API}/users?${encodeQueryString(q)}`
   const res = await request
     .get(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'listUserByExternalId',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return res.body;
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return res.body
 }
 
 /**
@@ -860,14 +889,14 @@ async function listUsersByExternalId(externalId) {
  * @param {Integer} externalId the legacy user id
  * @returns {Object} the user
  */
-async function getUserByExternalId(externalId) {
-  const users = await listUsersByExternalId(externalId);
+async function getUserByExternalId (externalId) {
+  const users = await listUsersByExternalId(externalId)
   if (_.isEmpty(users)) {
     throw new errors.NotFoundError(
       `externalId: ${externalId} "user" not found`
-    );
+    )
   }
-  return users[0];
+  return users[0]
 }
 
 /**
@@ -876,24 +905,24 @@ async function getUserByExternalId(externalId) {
  * @params {Object} payload the payload
  * @params {Object} options the extra options to control the function
  */
-async function postEvent(topic, payload, options = {}) {
+async function postEvent (topic, payload, options = {}) {
   logger.debug({
     component: 'helper',
     context: 'postEvent',
     message: `Posting event to Kafka topic ${topic}, ${JSON.stringify(
       payload
-    )}`,
-  });
-  const client = getBusApiClient();
+    )}`
+  })
+  const client = getBusApiClient()
   const message = {
     topic,
     originator: config.KAFKA_MESSAGE_ORIGINATOR,
     timestamp: new Date().toISOString(),
     'mime-type': 'application/json',
-    payload,
-  };
-  await client.postEvent(message);
-  await eventDispatcher.handleEvent(topic, { value: payload, options });
+    payload
+  }
+  await client.postEvent(message)
+  await eventDispatcher.handleEvent(topic, { value: payload, options })
 }
 
 /**
@@ -902,11 +931,11 @@ async function postEvent(topic, payload, options = {}) {
  * @param {Object} err the err
  * @returns {Boolean} the result
  */
-function isDocumentMissingException(err) {
+function isDocumentMissingException (err) {
   if (err.statusCode === 404 && err instanceof ESResponseError) {
-    return true;
+    return true
   }
-  return false;
+  return false
 }
 
 /**
@@ -915,34 +944,34 @@ function isDocumentMissingException(err) {
  * @param {Object} criteria the search criteria
  * @returns the request result
  */
-async function getProjects(currentUser, criteria = {}) {
-  let token;
+async function getProjects (currentUser, criteria = {}) {
+  let token
   if (currentUser.hasManagePermission || currentUser.isMachine) {
-    const m2mToken = await getM2MToken();
-    token = `Bearer ${m2mToken}`;
+    const m2mToken = await getM2MToken()
+    token = `Bearer ${m2mToken}`
   } else {
-    token = currentUser.jwtToken;
+    token = currentUser.jwtToken
   }
-  const url = `${config.TC_API}/projects?type=talent-as-a-service`;
+  const url = `${config.TC_API}/projects?type=talent-as-a-service`
   const res = await request
     .get(url)
     .query(criteria)
     .set('Authorization', token)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getProjects',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
   const result = _.map(res.body, (item) => {
-    return _.pick(item, ['id', 'name', 'invites', 'members']);
-  });
+    return _.pick(item, ['id', 'name', 'invites', 'members'])
+  })
   return {
     total: Number(_.get(res.headers, 'x-total')),
     page: Number(_.get(res.headers, 'x-page')),
     perPage: Number(_.get(res.headers, 'x-per-page')),
-    result,
-  };
+    result
+  }
 }
 
 /**
@@ -951,24 +980,24 @@ async function getProjects(currentUser, criteria = {}) {
  * @param {String} userId the legacy user id
  * @returns {Object} the user
  */
-async function getTopcoderUserById(userId) {
-  const token = await getM2MToken();
+async function getTopcoderUserById (userId) {
+  const token = await getM2MToken()
   const res = await request
     .get(config.TOPCODER_USERS_API)
     .query({ filter: `id=${userId}` })
     .set('Authorization', `Bearer ${token}`)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getTopcoderUserById',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  const user = _.get(res.body, 'result.content[0]');
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  const user = _.get(res.body, 'result.content[0]')
   if (!user) {
     throw new errors.NotFoundError(
       `userId: ${userId} "user" not found from ${config.TOPCODER_USERS_API}`
-    );
+    )
   }
-  return user;
+  return user
 }
 
 /**
@@ -976,31 +1005,31 @@ async function getTopcoderUserById(userId) {
  * @param {String} userId the user id
  * @returns the request result
  */
-async function getUserById(userId, enrich) {
-  const token = await getM2MUbahnToken();
+async function getUserById (userId, enrich) {
+  const token = await getM2MUbahnToken()
   const res = await request
     .get(`${config.TC_API}/users/${userId}` + (enrich ? '?enrich=true' : ''))
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getUserById',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
 
-  const user = _.pick(res.body, ['id', 'handle', 'firstName', 'lastName']);
+  const user = _.pick(res.body, ['id', 'handle', 'firstName', 'lastName'])
 
   if (enrich) {
     user.skills = (res.body.skills || []).map((skillObj) =>
       _.pick(skillObj.skill, ['id', 'name'])
-    );
-    const attributes = _.get(res, 'body.attributes', []);
+    )
+    const attributes = _.get(res, 'body.attributes', [])
     user.attributes = _.map(attributes, (attr) =>
       _.pick(attr, ['id', 'value', 'attribute.id', 'attribute.name'])
-    );
+    )
   }
 
-  return user;
+  return user
 }
 
 /**
@@ -1008,19 +1037,19 @@ async function getUserById(userId, enrich) {
  * @param {Object} data the user data
  * @returns the request result
  */
-async function createUbahnUser({ handle, firstName, lastName }) {
-  const token = await getM2MUbahnToken();
+async function createUbahnUser ({ handle, firstName, lastName }) {
+  const token = await getM2MUbahnToken()
   const res = await request
     .post(`${config.TC_API}/users`)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send({ handle, firstName, lastName });
+    .send({ handle, firstName, lastName })
   localLogger.debug({
     context: 'createUbahnUser',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.pick(res.body, ['id']);
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.pick(res.body, ['id'])
 }
 
 /**
@@ -1028,21 +1057,21 @@ async function createUbahnUser({ handle, firstName, lastName }) {
  * @param {String} userId the user id(with uuid format)
  * @param {Object} data the profile data
  */
-async function createUserExternalProfile(
+async function createUserExternalProfile (
   userId,
   { organizationId, externalId }
 ) {
-  const token = await getM2MUbahnToken();
+  const token = await getM2MUbahnToken()
   const res = await request
     .post(`${config.TC_API}/users/${userId}/externalProfiles`)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send({ organizationId, externalId: String(externalId) });
+    .send({ organizationId, externalId: String(externalId) })
   localLogger.debug({
     context: 'createUserExternalProfile',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
 }
 
 /**
@@ -1050,23 +1079,23 @@ async function createUserExternalProfile(
  * @param {Array} handles the handle array
  * @returns the request result
  */
-async function getMembers(handles) {
-  const token = await getM2MToken();
+async function getMembers (handles) {
+  const token = await getM2MToken()
   const handlesStr = _.map(handles, (handle) => {
-    return '%22' + handle.toLowerCase() + '%22';
-  }).join(',');
-  const url = `${config.TC_API}/members?fields=userId,handleLower,photoURL&handlesLower=[${handlesStr}]`;
+    return '%22' + handle.toLowerCase() + '%22'
+  }).join(',')
+  const url = `${config.TC_API}/members?fields=userId,handleLower,photoURL&handlesLower=[${handlesStr}]`
 
   const res = await request
     .get(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getMembers',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return res.body;
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return res.body
 }
 
 /**
@@ -1075,36 +1104,36 @@ async function getMembers(handles) {
  * @param {Number} id project id
  * @returns the request result
  */
-async function getProjectById(currentUser, id) {
-  let token;
+async function getProjectById (currentUser, id) {
+  let token
   if (currentUser.hasManagePermission || currentUser.isMachine) {
-    const m2mToken = await getM2MToken();
-    token = `Bearer ${m2mToken}`;
+    const m2mToken = await getM2MToken()
+    token = `Bearer ${m2mToken}`
   } else {
-    token = currentUser.jwtToken;
+    token = currentUser.jwtToken
   }
-  const url = `${config.TC_API}/projects/${id}`;
+  const url = `${config.TC_API}/projects/${id}`
   try {
     const res = await request
       .get(url)
       .set('Authorization', token)
       .set('Content-Type', 'application/json')
-      .set('Accept', 'application/json');
+      .set('Accept', 'application/json')
     localLogger.debug({
       context: 'getProjectById',
-      message: `response body: ${JSON.stringify(res.body)}`,
-    });
-    return _.pick(res.body, ['id', 'name', 'invites', 'members']);
+      message: `response body: ${JSON.stringify(res.body)}`
+    })
+    return _.pick(res.body, ['id', 'name', 'invites', 'members'])
   } catch (err) {
     if (err.status === HttpStatus.FORBIDDEN) {
       throw new errors.ForbiddenError(
         `You are not allowed to access the project with id ${id}`
-      );
+      )
     }
     if (err.status === HttpStatus.NOT_FOUND) {
-      throw new errors.NotFoundError(`id: ${id} project not found`);
+      throw new errors.NotFoundError(`id: ${id} project not found`)
     }
-    throw err;
+    throw err
   }
 }
 
@@ -1115,33 +1144,33 @@ async function getProjectById(currentUser, id) {
  * @param {Object} criteria the search criteria
  * @returns the request result
  */
-async function getTopcoderSkills(criteria) {
-  const token = await getM2MUbahnToken();
+async function getTopcoderSkills (criteria) {
+  const token = await getM2MUbahnToken()
   try {
     const res = await request
       .get(`${config.TC_API}/skills`)
       .query({
         skillProviderId: config.TOPCODER_SKILL_PROVIDER_ID,
-        ...criteria,
+        ...criteria
       })
       .set('Authorization', `Bearer ${token}`)
       .set('Content-Type', 'application/json')
-      .set('Accept', 'application/json');
+      .set('Accept', 'application/json')
     localLogger.debug({
       context: 'getTopcoderSkills',
-      message: `response body: ${JSON.stringify(res.body)}`,
-    });
+      message: `response body: ${JSON.stringify(res.body)}`
+    })
     return {
       total: Number(_.get(res.headers, 'x-total')),
       page: Number(_.get(res.headers, 'x-page')),
       perPage: Number(_.get(res.headers, 'x-per-page')),
-      result: res.body,
-    };
+      result: res.body
+    }
   } catch (err) {
     if (err.status === HttpStatus.BAD_REQUEST) {
-      throw new errors.BadRequestError(err.response.body.message);
+      throw new errors.BadRequestError(err.response.body.message)
     }
-    throw err;
+    throw err
   }
 }
 
@@ -1150,18 +1179,18 @@ async function getTopcoderSkills(criteria) {
  * @param {String} skillId the skill Id
  * @returns the request result
  */
-async function getSkillById(skillId) {
-  const token = await getM2MUbahnToken();
+async function getSkillById (skillId) {
+  const token = await getM2MUbahnToken()
   const res = await request
     .get(`${config.TC_API}/skills/${skillId}`)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getSkillById',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.pick(res.body, ['id', 'name']);
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.pick(res.body, ['id', 'name'])
 }
 
 /**
@@ -1174,22 +1203,22 @@ async function getSkillById(skillId) {
  * @params {Object} currentUser the user who perform this operation
  * @returns {String} the ubahn user id
  */
-async function ensureUbahnUserId(currentUser) {
+async function ensureUbahnUserId (currentUser) {
   try {
-    return (await getUserByExternalId(currentUser.userId)).id;
+    return (await getUserByExternalId(currentUser.userId)).id
   } catch (err) {
     if (!(err instanceof errors.NotFoundError)) {
-      throw err;
+      throw err
     }
-    const topcoderUser = await getTopcoderUserById(currentUser.userId);
+    const topcoderUser = await getTopcoderUserById(currentUser.userId)
     const user = await createUbahnUser(
       _.pick(topcoderUser, ['handle', 'firstName', 'lastName'])
-    );
+    )
     await createUserExternalProfile(user.id, {
       organizationId: config.ORG_ID,
-      externalId: currentUser.userId,
-    });
-    return user.id;
+      externalId: currentUser.userId
+    })
+    return user.id
   }
 }
 
@@ -1199,8 +1228,8 @@ async function ensureUbahnUserId(currentUser) {
  * @param {String} jobId the job id
  * @returns {Object} the job data
  */
-async function ensureJobById(jobId) {
-  return models.Job.findById(jobId);
+async function ensureJobById (jobId) {
+  return models.Job.findById(jobId)
 }
 
 /**
@@ -1209,8 +1238,8 @@ async function ensureJobById(jobId) {
  * @param {String} resourceBookingId the resourceBooking id
  * @returns {Object} the resourceBooking data
  */
-async function ensureResourceBookingById(resourceBookingId) {
-  return models.ResourceBooking.findById(resourceBookingId);
+async function ensureResourceBookingById (resourceBookingId) {
+  return models.ResourceBooking.findById(resourceBookingId)
 }
 
 /**
@@ -1218,8 +1247,8 @@ async function ensureResourceBookingById(resourceBookingId) {
  * @param {String} workPeriodId the workPeriod id
  * @returns the workPeriod data
  */
-async function ensureWorkPeriodById(workPeriodId) {
-  return models.WorkPeriod.findById(workPeriodId);
+async function ensureWorkPeriodById (workPeriodId) {
+  return models.WorkPeriod.findById(workPeriodId)
 }
 
 /**
@@ -1228,24 +1257,24 @@ async function ensureWorkPeriodById(workPeriodId) {
  * @param {String} jobId the user id
  * @returns {Object} the user data
  */
-async function ensureUserById(userId) {
-  const token = await getM2MUbahnToken();
+async function ensureUserById (userId) {
+  const token = await getM2MUbahnToken()
   try {
     const res = await request
       .get(`${config.TC_API}/users/${userId}`)
       .set('Authorization', `Bearer ${token}`)
       .set('Content-Type', 'application/json')
-      .set('Accept', 'application/json');
+      .set('Accept', 'application/json')
     localLogger.debug({
       context: 'ensureUserById',
-      message: `response body: ${JSON.stringify(res.body)}`,
-    });
-    return res.body;
+      message: `response body: ${JSON.stringify(res.body)}`
+    })
+    return res.body
   } catch (err) {
     if (err.status === HttpStatus.NOT_FOUND) {
-      throw new errors.NotFoundError(`id: ${userId} "user" not found`);
+      throw new errors.NotFoundError(`id: ${userId} "user" not found`)
     }
-    throw err;
+    throw err
   }
 }
 
@@ -1254,12 +1283,12 @@ async function ensureUserById(userId) {
  *
  * @returns {Object} the M2M auth user
  */
-function getAuditM2Muser() {
+function getAuditM2Muser () {
   return {
     isMachine: true,
     userId: config.m2m.M2M_AUDIT_USER_ID,
-    handle: config.m2m.M2M_AUDIT_HANDLE,
-  };
+    handle: config.m2m.M2M_AUDIT_HANDLE
+  }
 }
 
 /**
@@ -1271,24 +1300,24 @@ function getAuditM2Muser() {
  * @param {Number} projectId project id
  * @returns the result
  */
-async function checkIsMemberOfProject(userId, projectId) {
-  const m2mToken = await getM2MToken();
+async function checkIsMemberOfProject (userId, projectId) {
+  const m2mToken = await getM2MToken()
   const res = await request
     .get(`${config.TC_API}/projects/${projectId}`)
     .set('Authorization', `Bearer ${m2mToken}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
-  const memberIdList = _.map(res.body.members, 'userId');
+    .set('Accept', 'application/json')
+  const memberIdList = _.map(res.body.members, 'userId')
   localLogger.debug({
     context: 'checkIsMemberOfProject',
     message: `the members of project ${projectId}: ${JSON.stringify(
       memberIdList
-    )}, authUserId: ${JSON.stringify(userId)}`,
-  });
+    )}, authUserId: ${JSON.stringify(userId)}`
+  })
   if (!memberIdList.includes(userId)) {
     throw new errors.UnauthorizedError(
       `userId: ${userId} the user is not a member of project ${projectId}`
-    );
+    )
   }
 }
 
@@ -1298,11 +1327,11 @@ async function checkIsMemberOfProject(userId, projectId) {
  * @param {Array} handles the array of handles
  * @returns {Array} the member details
  */
-async function getMemberDetailsByHandles(handles) {
+async function getMemberDetailsByHandles (handles) {
   if (!handles.length) {
-    return [];
+    return []
   }
-  const token = await getM2MToken();
+  const token = await getM2MToken()
   const res = await request
     .get(`${config.TOPCODER_MEMBERS_API}/_search`)
     .query({
@@ -1310,15 +1339,15 @@ async function getMemberDetailsByHandles(handles) {
         handles,
         (handle) => `handleLower:${handle.toLowerCase()}`
       ).join(' OR '),
-      fields: 'userId,handle,firstName,lastName,email',
+      fields: 'userId,handle,firstName,lastName,email'
     })
     .set('Authorization', `Bearer ${token}`)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getMemberDetailsByHandles',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.get(res.body, 'result.content');
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.get(res.body, 'result.content')
 }
 
 /**
@@ -1327,17 +1356,17 @@ async function getMemberDetailsByHandles(handles) {
  * @param {String} handle the user handle
  * @returns {Object} the member details
  */
-async function getV3MemberDetailsByHandle(handle) {
-  const token = await getM2MToken();
+async function getV3MemberDetailsByHandle (handle) {
+  const token = await getM2MToken()
   const res = await request
     .get(`${config.TOPCODER_MEMBERS_API}/${handle}`)
     .set('Authorization', `Bearer ${token}`)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getV3MemberDetailsByHandle',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.get(res.body, 'result.content');
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.get(res.body, 'result.content')
 }
 
 /**
@@ -1347,20 +1376,20 @@ async function getV3MemberDetailsByHandle(handle) {
  * @param {String} email the email
  * @returns {Array} the member details
  */
-async function _getMemberDetailsByEmail(token, email) {
+async function _getMemberDetailsByEmail (token, email) {
   const res = await request
     .get(config.TOPCODER_USERS_API)
     .query({
       filter: `email=${email}`,
-      fields: 'handle,id,email,firstName,lastName',
+      fields: 'handle,id,email,firstName,lastName'
     })
     .set('Authorization', `Bearer ${token}`)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: '_getMemberDetailsByEmail',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.get(res.body, 'result.content');
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.get(res.body, 'result.content')
 }
 
 /**
@@ -1370,25 +1399,25 @@ async function _getMemberDetailsByEmail(token, email) {
  * @param {Array} emails the array of emails
  * @returns {Array} the member details
  */
-async function getMemberDetailsByEmails(emails) {
-  const token = await getM2MToken();
+async function getMemberDetailsByEmails (emails) {
+  const token = await getM2MToken()
   const limiter = new Bottleneck({
-    maxConcurrent: config.MAX_PARALLEL_REQUEST_TOPCODER_USERS_API,
-  });
+    maxConcurrent: config.MAX_PARALLEL_REQUEST_TOPCODER_USERS_API
+  })
   const membersArray = await Promise.all(
     emails.map((email) =>
       limiter.schedule(() =>
         _getMemberDetailsByEmail(token, email).catch((error) => {
           localLogger.error({
             context: 'getMemberDetailsByEmails',
-            message: error.message,
-          });
-          return [];
+            message: error.message
+          })
+          return []
         })
       )
     )
-  );
-  return _.flatten(membersArray);
+  )
+  return _.flatten(membersArray)
 }
 
 /**
@@ -1399,20 +1428,20 @@ async function getMemberDetailsByEmails(emails) {
  * @param {Object} criteria the filtering criteria
  * @returns {Object} the member created
  */
-async function createProjectMember(projectId, data, criteria) {
-  const m2mToken = await getM2MToken();
+async function createProjectMember (projectId, data, criteria) {
+  const m2mToken = await getM2MToken()
   const { body: member } = await request
     .post(`${config.TC_API}/projects/${projectId}/members`)
     .set('Authorization', `Bearer ${m2mToken}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
     .query(criteria)
-    .send(data);
+    .send(data)
   localLogger.debug({
     context: 'createProjectMember',
-    message: `response body: ${JSON.stringify(member)}`,
-  });
-  return member;
+    message: `response body: ${JSON.stringify(member)}`
+  })
+  return member
 }
 
 /**
@@ -1422,21 +1451,21 @@ async function createProjectMember(projectId, data, criteria) {
  * @param {Object} criteria the search criteria
  * @returns {Array} the project members
  */
-async function listProjectMembers(currentUser, projectId, criteria = {}) {
+async function listProjectMembers (currentUser, projectId, criteria = {}) {
   const token =
     currentUser.hasManagePermission || currentUser.isMachine
       ? `Bearer ${await getM2MToken()}`
-      : currentUser.jwtToken;
+      : currentUser.jwtToken
   const { body: members } = await request
     .get(`${config.TC_API}/projects/${projectId}/members`)
     .query(criteria)
     .set('Authorization', token)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'listProjectMembers',
-    message: `response body: ${JSON.stringify(members)}`,
-  });
-  return members;
+    message: `response body: ${JSON.stringify(members)}`
+  })
+  return members
 }
 
 /**
@@ -1446,21 +1475,21 @@ async function listProjectMembers(currentUser, projectId, criteria = {}) {
  * @param {Object} criteria the search criteria
  * @returns {Array} the member invites
  */
-async function listProjectMemberInvites(currentUser, projectId, criteria = {}) {
+async function listProjectMemberInvites (currentUser, projectId, criteria = {}) {
   const token =
     currentUser.hasManagePermission || currentUser.isMachine
       ? `Bearer ${await getM2MToken()}`
-      : currentUser.jwtToken;
+      : currentUser.jwtToken
   const { body: invites } = await request
     .get(`${config.TC_API}/projects/${projectId}/invites`)
     .query(criteria)
     .set('Authorization', token)
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'listProjectMemberInvites',
-    message: `response body: ${JSON.stringify(invites)}`,
-  });
-  return invites;
+    message: `response body: ${JSON.stringify(invites)}`
+  })
+  return invites
 }
 
 /**
@@ -1470,24 +1499,24 @@ async function listProjectMemberInvites(currentUser, projectId, criteria = {}) {
  * @param {String} projectMemberId the id of the project member
  * @returns {undefined}
  */
-async function deleteProjectMember(currentUser, projectId, projectMemberId) {
+async function deleteProjectMember (currentUser, projectId, projectMemberId) {
   const token =
     currentUser.hasManagePermission || currentUser.isMachine
       ? `Bearer ${await getM2MToken()}`
-      : currentUser.jwtToken;
+      : currentUser.jwtToken
   try {
     await request
       .delete(
         `${config.TC_API}/projects/${projectId}/members/${projectMemberId}`
       )
-      .set('Authorization', token);
+      .set('Authorization', token)
   } catch (err) {
     if (err.status === HttpStatus.NOT_FOUND) {
       throw new errors.NotFoundError(
         `projectMemberId: ${projectMemberId} "member" doesn't exist in project ${projectId}`
-      );
+      )
     }
-    throw err;
+    throw err
   }
 }
 
@@ -1497,13 +1526,13 @@ async function deleteProjectMember(currentUser, projectId, projectMemberId) {
  * @param {String} attributeName Requested attribute name, e.g. "email"
  * @returns attribute value
  */
-function getUserAttributeValue(user, attributeName) {
-  const attributes = _.get(user, 'attributes', []);
+function getUserAttributeValue (user, attributeName) {
+  const attributes = _.get(user, 'attributes', [])
   const targetAttribute = _.find(
     attributes,
     (a) => a.attribute.name === attributeName
-  );
-  return _.get(targetAttribute, 'value');
+  )
+  return _.get(targetAttribute, 'value')
 }
 
 /**
@@ -1513,34 +1542,34 @@ function getUserAttributeValue(user, attributeName) {
  * @param {String} token m2m token
  * @returns {Object} the challenge created
  */
-async function createChallenge(data, token) {
+async function createChallenge (data, token) {
   if (!token) {
-    token = await getM2MToken();
+    token = await getM2MToken()
   }
-  const url = `${config.TC_API}/challenges`;
+  const url = `${config.TC_API}/challenges`
   localLogger.debug({
     context: 'createChallenge',
-    message: `EndPoint: POST ${url}`,
-  });
+    message: `EndPoint: POST ${url}`
+  })
   localLogger.debug({
     context: 'createChallenge',
-    message: `Request Body: ${JSON.stringify(data)}`,
-  });
+    message: `Request Body: ${JSON.stringify(data)}`
+  })
   const { body: challenge, status: httpStatus } = await request
     .post(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send(data);
+    .send(data)
   localLogger.debug({
     context: 'createChallenge',
-    message: `Status Code: ${httpStatus}`,
-  });
+    message: `Status Code: ${httpStatus}`
+  })
   localLogger.debug({
     context: 'createChallenge',
-    message: `Response Body: ${JSON.stringify(challenge)}`,
-  });
-  return challenge;
+    message: `Response Body: ${JSON.stringify(challenge)}`
+  })
+  return challenge
 }
 
 /**
@@ -1551,34 +1580,34 @@ async function createChallenge(data, token) {
  * @param {String} token m2m token
  * @returns {Object} the challenge updated
  */
-async function updateChallenge(challengeId, data, token) {
+async function updateChallenge (challengeId, data, token) {
   if (!token) {
-    token = await getM2MToken();
+    token = await getM2MToken()
   }
-  const url = `${config.TC_API}/challenges/${challengeId}`;
+  const url = `${config.TC_API}/challenges/${challengeId}`
   localLogger.debug({
     context: 'updateChallenge',
-    message: `EndPoint: PATCH ${url}`,
-  });
+    message: `EndPoint: PATCH ${url}`
+  })
   localLogger.debug({
     context: 'updateChallenge',
-    message: `Request Body: ${JSON.stringify(data)}`,
-  });
+    message: `Request Body: ${JSON.stringify(data)}`
+  })
   const { body: challenge, status: httpStatus } = await request
     .patch(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send(data);
+    .send(data)
   localLogger.debug({
     context: 'updateChallenge',
-    message: `Status Code: ${httpStatus}`,
-  });
+    message: `Status Code: ${httpStatus}`
+  })
   localLogger.debug({
     context: 'updateChallenge',
-    message: `Response Body: ${JSON.stringify(challenge)}`,
-  });
-  return challenge;
+    message: `Response Body: ${JSON.stringify(challenge)}`
+  })
+  return challenge
 }
 
 /**
@@ -1588,34 +1617,34 @@ async function updateChallenge(challengeId, data, token) {
  * @param {String} token m2m token
  * @returns {Object} the resource created
  */
-async function createChallengeResource(data, token) {
+async function createChallengeResource (data, token) {
   if (!token) {
-    token = await getM2MToken();
+    token = await getM2MToken()
   }
-  const url = `${config.TC_API}/resources`;
+  const url = `${config.TC_API}/resources`
   localLogger.debug({
     context: 'createChallengeResource',
-    message: `EndPoint: POST ${url}`,
-  });
+    message: `EndPoint: POST ${url}`
+  })
   localLogger.debug({
     context: 'createChallengeResource',
-    message: `Request Body: ${JSON.stringify(data)}`,
-  });
+    message: `Request Body: ${JSON.stringify(data)}`
+  })
   const { body: resource, status: httpStatus } = await request
     .post(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send(data);
+    .send(data)
   localLogger.debug({
     context: 'createChallengeResource',
-    message: `Status Code: ${httpStatus}`,
-  });
+    message: `Status Code: ${httpStatus}`
+  })
   localLogger.debug({
     context: 'createChallengeResource',
-    message: `Response Body: ${JSON.stringify(resource)}`,
-  });
-  return resource;
+    message: `Response Body: ${JSON.stringify(resource)}`
+  })
+  return resource
 }
 
 /**
@@ -1624,40 +1653,40 @@ async function createChallengeResource(data, token) {
  * @param {Date} end end date of the resource booking
  * @returns {Array<{startDate:Date, endDate:Date, daysWorked:number}>} information about workPeriods
  */
-function extractWorkPeriods(start, end) {
+function extractWorkPeriods (start, end) {
   // calculate maximum possible daysWorked for a week
-  function getDaysWorked(week) {
+  function getDaysWorked (week) {
     if (weeks === 1) {
-      return Math.min(endDay, 5) - Math.max(startDay, 1) + 1;
+      return Math.min(endDay, 5) - Math.max(startDay, 1) + 1
     } else if (week === 0) {
-      return Math.min(6 - startDay, 5);
+      return Math.min(6 - startDay, 5)
     } else if (week === weeks - 1) {
-      return Math.min(endDay, 5);
-    } else return 5;
+      return Math.min(endDay, 5)
+    } else return 5
   }
-  const periods = [];
+  const periods = []
   if (_.isNil(start) || _.isNil(end)) {
-    return periods;
+    return periods
   }
-  const startDate = moment(start);
-  const startDay = startDate.get('day');
-  startDate.set('day', 0).startOf('day');
+  const startDate = moment(start)
+  const startDay = startDate.get('day')
+  startDate.set('day', 0).startOf('day')
 
-  const endDate = moment(end);
-  const endDay = endDate.get('day');
-  endDate.set('day', 6).endOf('day');
+  const endDate = moment(end)
+  const endDay = endDate.get('day')
+  endDate.set('day', 6).endOf('day')
 
-  const weeks = Math.round(moment.duration(endDate - startDate).asDays()) / 7;
+  const weeks = Math.round(moment.duration(endDate - startDate).asDays()) / 7
 
   for (let i = 0; i < weeks; i++) {
     periods.push({
       startDate: startDate.format('YYYY-MM-DD'),
       endDate: startDate.add(6, 'day').format('YYYY-MM-DD'),
-      daysWorked: getDaysWorked(i),
-    });
-    startDate.add(1, 'day');
+      daysWorked: getDaysWorked(i)
+    })
+    startDate.add(1, 'day')
   }
-  return periods;
+  return periods
 }
 
 /**
@@ -1666,19 +1695,19 @@ function extractWorkPeriods(start, end) {
  * @param {String} userHandle user handle
  * @returns {String} email address of the user
  */
-async function getUserByHandle(userHandle) {
-  const token = await getM2MToken();
-  const url = `${config.TC_API}/members/${userHandle}`;
+async function getUserByHandle (userHandle) {
+  const token = await getM2MToken()
+  const url = `${config.TC_API}/members/${userHandle}`
   const res = await request
     .get(url)
     .set('Authorization', `Bearer ${token}`)
     .set('Content-Type', 'application/json')
-    .set('Accept', 'application/json');
+    .set('Accept', 'application/json')
   localLogger.debug({
     context: 'getUserByHandle',
-    message: `response body: ${JSON.stringify(res.body)}`,
-  });
-  return _.get(res, 'body');
+    message: `response body: ${JSON.stringify(res.body)}`
+  })
+  return _.get(res, 'body')
 }
 
 /**
@@ -1687,14 +1716,14 @@ async function getUserByHandle(userHandle) {
  * @param {*} object of json that would be replaced in string
  * @returns
  */
-async function substituteStringByObject(string, object) {
+async function substituteStringByObject (string, object) {
   for (var key in object) {
     if (!Object.prototype.hasOwnProperty.call(object, key)) {
-      continue;
+      continue
     }
-    string = string.replace(new RegExp('{{' + key + '}}', 'g'), object[key]);
+    string = string.replace(new RegExp('{{' + key + '}}', 'g'), object[key])
   }
-  return string;
+  return string
 }
 
 /**
@@ -1702,19 +1731,19 @@ async function substituteStringByObject(string, object) {
  * @param {Object} data title of project and any other info
  * @returns {Object} the project created
  */
-async function createProject(currentUser, data) {
-  const token = currentUser.jwtToken;
+async function createProject (currentUser, data) {
+  const token = currentUser.jwtToken
   const res = await request
     .post(`${config.TC_API}/projects/`)
     .set('Authorization', token)
     .set('Content-Type', 'application/json')
     .set('Accept', 'application/json')
-    .send(data);
+    .send(data)
   localLogger.debug({
     context: 'createProject',
-    message: `response body: ${JSON.stringify(res)}`,
-  });
-  return _.get(res, 'body');
+    message: `response body: ${JSON.stringify(res)}`
+  })
+  return _.get(res, 'body')
 }
 
 module.exports = {
@@ -1733,9 +1762,9 @@ module.exports = {
   getUserId: async (userId) => {
     // check m2m user id
     if (userId === config.m2m.M2M_AUDIT_USER_ID) {
-      return config.m2m.M2M_AUDIT_USER_ID;
+      return config.m2m.M2M_AUDIT_USER_ID
     }
-    return ensureUbahnUserId({ userId });
+    return ensureUbahnUserId({ userId })
   },
   getUserByExternalId,
   getM2MToken,
@@ -1769,5 +1798,5 @@ module.exports = {
   extractWorkPeriods,
   getUserByHandle,
   substituteStringByObject,
-  createProject,
-};
+  createProject
+}
diff --git a/src/controllers/RoleController.js b/src/controllers/RoleController.js
new file mode 100644
index 0000000..747cbe4
--- /dev/null
+++ b/src/controllers/RoleController.js
@@ -0,0 +1,59 @@
+/**
+ * Controller for Role endpoints
+ */
+const HttpStatus = require('http-status-codes')
+const service = require('../services/RoleService')
+
+/**
+ * Get role by id
+ * @param req the request
+ * @param res the response
+ */
+async function getRole (req, res) {
+  res.send(await service.getRole(req.authUser, req.params.id, req.query.fromDb))
+}
+
+/**
+ * Create role
+ * @param req the request
+ * @param res the response
+ */
+async function createRole (req, res) {
+  res.send(await service.createRole(req.authUser, req.body))
+}
+
+/**
+ * update role by id
+ * @param req the request
+ * @param res the response
+ */
+async function updateRole (req, res) {
+  res.send(await service.updateRole(req.authUser, req.params.id, req.body))
+}
+
+/**
+ * Delete role by id
+ * @param req the request
+ * @param res the response
+ */
+async function deleteRole (req, res) {
+  await service.deleteRole(req.authUser, req.params.id)
+  res.status(HttpStatus.NO_CONTENT).end()
+}
+
+/**
+ * Search roles
+ * @param req the request
+ * @param res the response
+ */
+async function searchRoles (req, res) {
+  res.send(await service.searchRoles(req.authUser, req.query))
+}
+
+module.exports = {
+  getRole,
+  createRole,
+  updateRole,
+  deleteRole,
+  searchRoles
+}
diff --git a/src/controllers/TeamController.js b/src/controllers/TeamController.js
index ca4f1bc..26d7073 100644
--- a/src/controllers/TeamController.js
+++ b/src/controllers/TeamController.js
@@ -1,19 +1,19 @@
 /**
  * Controller for TaaS teams endpoints
  */
-const HttpStatus = require('http-status-codes');
-const service = require('../services/TeamService');
-const helper = require('../common/helper');
+const HttpStatus = require('http-status-codes')
+const service = require('../services/TeamService')
+const helper = require('../common/helper')
 
 /**
  * Search teams
  * @param req the request
  * @param res the response
  */
-async function searchTeams(req, res) {
-  const result = await service.searchTeams(req.authUser, req.query);
-  helper.setResHeaders(req, res, result);
-  res.send(result.result);
+async function searchTeams (req, res) {
+  const result = await service.searchTeams(req.authUser, req.query)
+  helper.setResHeaders(req, res, result)
+  res.send(result.result)
 }
 
 /**
@@ -21,8 +21,8 @@ async function searchTeams(req, res) {
  * @param req the request
  * @param res the response
  */
-async function getTeam(req, res) {
-  res.send(await service.getTeam(req.authUser, req.params.id));
+async function getTeam (req, res) {
+  res.send(await service.getTeam(req.authUser, req.params.id))
 }
 
 /**
@@ -30,10 +30,10 @@ async function getTeam(req, res) {
  * @param req the request
  * @param res the response
  */
-async function getTeamJob(req, res) {
+async function getTeamJob (req, res) {
   res.send(
     await service.getTeamJob(req.authUser, req.params.id, req.params.jobId)
-  );
+  )
 }
 
 /**
@@ -41,9 +41,9 @@ async function getTeamJob(req, res) {
  * @param req the request
  * @param res the response
  */
-async function sendEmail(req, res) {
-  await service.sendEmail(req.authUser, req.body);
-  res.status(HttpStatus.NO_CONTENT).end();
+async function sendEmail (req, res) {
+  await service.sendEmail(req.authUser, req.body)
+  res.status(HttpStatus.NO_CONTENT).end()
 }
 
 /**
@@ -51,10 +51,10 @@ async function sendEmail(req, res) {
  * @param req the request
  * @param res the response
  */
-async function addMembers(req, res) {
+async function addMembers (req, res) {
   res.send(
     await service.addMembers(req.authUser, req.params.id, req.query, req.body)
-  );
+  )
 }
 
 /**
@@ -62,13 +62,13 @@ async function addMembers(req, res) {
  * @param req the request
  * @param res the response
  */
-async function searchMembers(req, res) {
+async function searchMembers (req, res) {
   const result = await service.searchMembers(
     req.authUser,
     req.params.id,
     req.query
-  );
-  res.send(result.result);
+  )
+  res.send(result.result)
 }
 
 /**
@@ -76,13 +76,13 @@ async function searchMembers(req, res) {
  * @param req the request
  * @param res the response
  */
-async function searchInvites(req, res) {
+async function searchInvites (req, res) {
   const result = await service.searchInvites(
     req.authUser,
     req.params.id,
     req.query
-  );
-  res.send(result.result);
+  )
+  res.send(result.result)
 }
 
 /**
@@ -90,13 +90,13 @@ async function searchInvites(req, res) {
  * @param req the request
  * @param res the response
  */
-async function deleteMember(req, res) {
+async function deleteMember (req, res) {
   await service.deleteMember(
     req.authUser,
     req.params.id,
     req.params.projectMemberId
-  );
-  res.status(HttpStatus.NO_CONTENT).end();
+  )
+  res.status(HttpStatus.NO_CONTENT).end()
 }
 
 /**
@@ -104,8 +104,8 @@ async function deleteMember(req, res) {
  * @param req the request
  * @param res the response
  */
-async function getMe(req, res) {
-  res.send(await service.getMe(req.authUser));
+async function getMe (req, res) {
+  res.send(await service.getMe(req.authUser))
 }
 
 /**
@@ -113,8 +113,8 @@ async function getMe(req, res) {
  * @param req the request
  * @param res the response
  */
-async function createProj(req, res) {
-  res.send(await service.createProj(req.authUser, req.body));
+async function createProj (req, res) {
+  res.send(await service.createProj(req.authUser, req.body))
 }
 
 module.exports = {
@@ -127,5 +127,5 @@ module.exports = {
   searchInvites,
   deleteMember,
   getMe,
-  createProj,
-};
+  createProj
+}
diff --git a/src/eventHandlers/RoleEventHandler.js b/src/eventHandlers/RoleEventHandler.js
new file mode 100644
index 0000000..38dbdb7
--- /dev/null
+++ b/src/eventHandlers/RoleEventHandler.js
@@ -0,0 +1,64 @@
+/*
+ * Handle events for ResourceBooking.
+ */
+
+const { Op } = require('sequelize')
+const _ = require('lodash')
+const models = require('../models')
+const logger = require('../common/logger')
+const helper = require('../common/helper')
+const JobService = require('../services/JobService')
+
+const Job = models.Job
+
+/**
+ * When a Role is deleted, jobs related to
+ * that role should be updated
+ * @param {object} payload the event payload
+ * @returns {undefined}
+ */
+async function updateJobs (payload) {
+  // find jobs have this role
+  const jobs = await Job.findAll({
+    where: {
+      roleIds: { [Op.contains]: [payload.value.id] }
+    },
+    raw: true
+  })
+  if (jobs.length === 0) {
+    logger.debug({
+      component: 'RoleEventHandler',
+      context: 'updateJobs',
+      message: `id: ${payload.value.id} role has no related job - ignored`
+    })
+    return
+  }
+  const m2mUser = helper.getAuditM2Muser()
+  // remove role id from related jobs
+  await Promise.all(_.map(jobs, async job => {
+    let roleIds = _.filter(job.roleIds, roleId => roleId !== payload.value.id)
+    if (roleIds.length === 0) {
+      roleIds = null
+    }
+    await JobService.partiallyUpdateJob(m2mUser, job.id, { roleIds })
+  }))
+  logger.debug({
+    component: 'RoleEventHandler',
+    context: 'updateJobs',
+    message: `role id: ${payload.value.id} removed from jobs with id: ${_.map(jobs, 'id')}`
+  })
+}
+
+/**
+ * Process role delete event.
+ *
+ * @param {Object} payload the event payload
+ * @returns {undefined}
+ */
+async function processDelete (payload) {
+  await updateJobs(payload)
+}
+
+module.exports = {
+  processDelete
+}
diff --git a/src/eventHandlers/index.js b/src/eventHandlers/index.js
index 1744599..6e0ec2a 100644
--- a/src/eventHandlers/index.js
+++ b/src/eventHandlers/index.js
@@ -8,6 +8,7 @@ const JobEventHandler = require('./JobEventHandler')
 const JobCandidateEventHandler = require('./JobCandidateEventHandler')
 const ResourceBookingEventHandler = require('./ResourceBookingEventHandler')
 const InterviewEventHandler = require('./InterviewEventHandler')
+const RoleEventHandler = require('./RoleEventHandler')
 const logger = require('../common/logger')
 
 const TopicOperationMapping = {
@@ -16,7 +17,8 @@ const TopicOperationMapping = {
   [config.TAAS_RESOURCE_BOOKING_CREATE_TOPIC]: ResourceBookingEventHandler.processCreate,
   [config.TAAS_RESOURCE_BOOKING_UPDATE_TOPIC]: ResourceBookingEventHandler.processUpdate,
   [config.TAAS_RESOURCE_BOOKING_DELETE_TOPIC]: ResourceBookingEventHandler.processDelete,
-  [config.TAAS_INTERVIEW_REQUEST_TOPIC]: InterviewEventHandler.processRequest
+  [config.TAAS_INTERVIEW_REQUEST_TOPIC]: InterviewEventHandler.processRequest,
+  [config.TAAS_ROLE_DELETE_TOPIC]: RoleEventHandler.processDelete
 }
 
 /**
diff --git a/src/models/Job.js b/src/models/Job.js
index 49d34ff..66f15b0 100644
--- a/src/models/Job.js
+++ b/src/models/Job.js
@@ -104,6 +104,12 @@ module.exports = (sequelize) => {
         defaultValue: false,
         allowNull: false
       },
+      roleIds: {
+        field: 'role_ids',
+        type: Sequelize.ARRAY({
+          type: Sequelize.UUID
+        })
+      },
       createdBy: {
         field: 'created_by',
         type: Sequelize.UUID,
diff --git a/src/models/Role.js b/src/models/Role.js
new file mode 100644
index 0000000..57cd502
--- /dev/null
+++ b/src/models/Role.js
@@ -0,0 +1,165 @@
+const { Sequelize, Model } = require('sequelize')
+const config = require('config')
+const errors = require('../common/errors')
+
+module.exports = (sequelize) => {
+  class Role extends Model {
+    /**
+     * Get role by id
+     * @param {String} id the role id
+     * @returns {Role} the role instance
+     */
+    static async findById (id) {
+      const role = await Role.findOne({
+        where: {
+          id
+        }
+      })
+      if (!role) {
+        throw new errors.NotFoundError(`id: ${id} "Role" doesn't exists.`)
+      }
+      return role
+    }
+  }
+  Role.init(
+    {
+      id: {
+        type: Sequelize.UUID,
+        primaryKey: true,
+        allowNull: false,
+        defaultValue: Sequelize.UUIDV4
+      },
+      name: {
+        type: Sequelize.STRING(50),
+        allowNull: false
+      },
+      description: {
+        type: Sequelize.STRING(1000)
+      },
+      listOfSkills: {
+        field: 'list_of_skills',
+        type: Sequelize.ARRAY({
+          type: Sequelize.STRING(50)
+        })
+      },
+      rates: {
+        type: Sequelize.ARRAY({
+          type: Sequelize.JSONB({
+            global: {
+              type: Sequelize.SMALLINT,
+              allowNull: false
+            },
+            inCountry: {
+              field: 'in_country',
+              type: Sequelize.SMALLINT,
+              allowNull: false
+            },
+            offShore: {
+              field: 'off_shore',
+              type: Sequelize.SMALLINT,
+              allowNull: false
+            },
+            rate30Global: {
+              field: 'rate30_global',
+              type: Sequelize.SMALLINT
+            },
+            rate30InCountry: {
+              field: 'rate30_in_country',
+              type: Sequelize.SMALLINT
+            },
+            rate30OffShore: {
+              field: 'rate30_off_shore',
+              type: Sequelize.SMALLINT
+            },
+            rate20Global: {
+              field: 'rate20_global',
+              type: Sequelize.SMALLINT
+            },
+            rate20InCountry: {
+              field: 'rate20_in_country',
+              type: Sequelize.SMALLINT
+            },
+            rate20OffShore: {
+              field: 'rate20_off_shore',
+              type: Sequelize.SMALLINT
+            }
+          }),
+          allowNull: false
+        }),
+        allowNull: false
+      },
+      numberOfMembers: {
+        field: 'number_of_members',
+        type: Sequelize.NUMERIC
+      },
+      numberOfMembersAvailable: {
+        field: 'number_of_members_available',
+        type: Sequelize.SMALLINT
+      },
+      imageUrl: {
+        field: 'image_url',
+        type: Sequelize.STRING(255)
+      },
+      timeToCandidate: {
+        field: 'time_to_candidate',
+        type: Sequelize.SMALLINT
+      },
+      timeToInterview: {
+        field: 'time_to_interview',
+        type: Sequelize.SMALLINT
+      },
+      createdBy: {
+        field: 'created_by',
+        type: Sequelize.UUID,
+        allowNull: false
+      },
+      updatedBy: {
+        field: 'updated_by',
+        type: Sequelize.UUID
+      },
+      createdAt: {
+        field: 'created_at',
+        type: Sequelize.DATE
+      },
+      updatedAt: {
+        field: 'updated_at',
+        type: Sequelize.DATE
+      },
+      deletedAt: {
+        field: 'deleted_at',
+        type: Sequelize.DATE
+      }
+    },
+    {
+      schema: config.DB_SCHEMA_NAME,
+      sequelize,
+      tableName: 'roles',
+      paranoid: true,
+      deletedAt: 'deletedAt',
+      createdAt: 'createdAt',
+      updatedAt: 'updatedAt',
+      timestamps: true,
+      defaultScope: {
+        attributes: {
+          exclude: ['deletedAt']
+        }
+      },
+      hooks: {
+        afterCreate: (role) => {
+          delete role.dataValues.deletedAt
+        }
+      },
+      indexes: [
+        {
+          unique: true,
+          fields: ['name'],
+          where: {
+            deleted_at: null
+          }
+        }
+      ]
+    }
+  )
+
+  return Role
+}
diff --git a/src/routes/RoleRoutes.js b/src/routes/RoleRoutes.js
new file mode 100644
index 0000000..2fb6d55
--- /dev/null
+++ b/src/routes/RoleRoutes.js
@@ -0,0 +1,41 @@
+/**
+ * Contains role routes
+ */
+const constants = require('../../app-constants')
+
+module.exports = {
+  '/roles': {
+    post: {
+      controller: 'RoleController',
+      method: 'createRole',
+      auth: 'jwt',
+      scopes: [constants.Scopes.CREATE_ROLE, constants.Scopes.ALL_ROLE]
+    },
+    get: {
+      controller: 'RoleController',
+      method: 'searchRoles',
+      auth: 'jwt',
+      scopes: [constants.Scopes.READ_ROLE, constants.Scopes.ALL_ROLE]
+    }
+  },
+  '/roles/:id': {
+    get: {
+      controller: 'RoleController',
+      method: 'getRole',
+      auth: 'jwt',
+      scopes: [constants.Scopes.READ_ROLE, constants.Scopes.ALL_ROLE]
+    },
+    patch: {
+      controller: 'RoleController',
+      method: 'updateRole',
+      auth: 'jwt',
+      scopes: [constants.Scopes.UPDATE_ROLE, constants.Scopes.ALL_ROLE]
+    },
+    delete: {
+      controller: 'RoleController',
+      method: 'deleteRole',
+      auth: 'jwt',
+      scopes: [constants.Scopes.DELETE_ROLE, constants.Scopes.ALL_ROLE]
+    }
+  }
+}
diff --git a/src/routes/TeamRoutes.js b/src/routes/TeamRoutes.js
index 9bbe25c..07d777d 100644
--- a/src/routes/TeamRoutes.js
+++ b/src/routes/TeamRoutes.js
@@ -1,7 +1,7 @@
 /**
  * Contains taas team routes
  */
-const constants = require('../../app-constants');
+const constants = require('../../app-constants')
 
 module.exports = {
   '/taas-teams': {
@@ -9,85 +9,85 @@ module.exports = {
       controller: 'TeamController',
       method: 'searchTeams',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/email': {
     post: {
       controller: 'TeamController',
       method: 'sendEmail',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/skills': {
     get: {
       controller: 'SkillController',
       method: 'searchSkills',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/me': {
     get: {
       controller: 'TeamController',
       method: 'getMe',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/:id': {
     get: {
       controller: 'TeamController',
       method: 'getTeam',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/:id/jobs/:jobId': {
     get: {
       controller: 'TeamController',
       method: 'getTeamJob',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/:id/members': {
     post: {
       controller: 'TeamController',
       method: 'addMembers',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
     },
     get: {
       controller: 'TeamController',
       method: 'searchMembers',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/:id/invites': {
     get: {
       controller: 'TeamController',
       method: 'searchInvites',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/:id/members/:projectMemberId': {
     delete: {
       controller: 'TeamController',
       method: 'deleteMember',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
   },
   '/taas-teams/createTeamRequest': {
     post: {
       controller: 'TeamController',
       method: 'createProj',
       auth: 'jwt',
-      scopes: [constants.Scopes.READ_TAAS_TEAM],
-    },
-  },
-};
+      scopes: [constants.Scopes.READ_TAAS_TEAM]
+    }
+  }
+}
diff --git a/src/services/InterviewService.js b/src/services/InterviewService.js
index 10a065f..a69a788 100644
--- a/src/services/InterviewService.js
+++ b/src/services/InterviewService.js
@@ -241,8 +241,8 @@ async function requestInterview (currentUser, jobCandidateId, interview) {
   const guestMembers = await helper.getMemberDetailsByEmails(interview.guestEmails)
   interview.hostName = `${hostMembers[0].firstName} ${hostMembers[0].lastName}`
   interview.guestNames = _.map(interview.guestEmails, (guestEmail) => {
-    var foundGuestMember = _.find(guestMembers, function(guestMember) { return guestEmail == guestMember.email });
-    return (foundGuestMember != undefined) ? `${foundGuestMember.firstName} ${foundGuestMember.lastName}` : guestEmail.split("@")[0]
+    var foundGuestMember = _.find(guestMembers, function (guestMember) { return guestEmail === guestMember.email })
+    return (foundGuestMember !== undefined) ? `${foundGuestMember.firstName} ${foundGuestMember.lastName}` : guestEmail.split('@')[0]
   })
 
   try {
diff --git a/src/services/JobService.js b/src/services/JobService.js
index 7d855bd..be5dfde 100644
--- a/src/services/JobService.js
+++ b/src/services/JobService.js
@@ -74,6 +74,27 @@ async function _validateSkills (skills) {
   }
 }
 
+/**
+ * Validate if all roles exist.
+ *
+ * @param {Array} roles the list of roles
+ * @returns {undefined}
+ */
+async function _validateRoles (roles) {
+  const foundRolesObj = await models.Role.findAll({
+    where: {
+      id: roles
+    },
+    attributes: ['id'],
+    raw: true
+  })
+  const foundRoles = _.map(foundRolesObj, 'id')
+  const nonexistentRoles = _.difference(roles, foundRoles)
+  if (nonexistentRoles.length > 0) {
+    throw new errors.BadRequestError(`Invalid roles: [${nonexistentRoles}]`)
+  }
+}
+
 /**
  * Check user permission for getting job.
  *
@@ -154,6 +175,10 @@ async function createJob (currentUser, job) {
   }
 
   await _validateSkills(job.skills)
+  if (job.roleIds) {
+    job.roleIds = _.uniq(job.roleIds)
+    await _validateRoles(job.roleIds)
+  }
   job.id = uuid()
   job.createdBy = await helper.getUserId(currentUser.userId)
 
@@ -177,7 +202,8 @@ createJob.schema = Joi.object().keys({
     rateType: Joi.rateType().allow(null),
     workload: Joi.workload().allow(null),
     skills: Joi.array().items(Joi.string().uuid()).required(),
-    isApplicationPageActive: Joi.boolean()
+    isApplicationPageActive: Joi.boolean(),
+    roleIds: Joi.array().items(Joi.string().uuid().required())
   }).required()
 }).required()
 
@@ -192,6 +218,10 @@ async function updateJob (currentUser, id, data) {
   if (data.skills) {
     await _validateSkills(data.skills)
   }
+  if (data.roleIds) {
+    data.roleIds = _.uniq(data.roleIds)
+    await _validateRoles(data.roleIds)
+  }
   let job = await Job.findById(id)
   const oldValue = job.toJSON()
 
@@ -245,7 +275,8 @@ partiallyUpdateJob.schema = Joi.object().keys({
     rateType: Joi.rateType().allow(null),
     workload: Joi.workload().allow(null),
     skills: Joi.array().items(Joi.string().uuid()),
-    isApplicationPageActive: Joi.boolean()
+    isApplicationPageActive: Joi.boolean(),
+    roleIds: Joi.array().items(Joi.string().uuid().required()).allow(null)
   }).required()
 }).required()
 
@@ -276,7 +307,8 @@ fullyUpdateJob.schema = Joi.object().keys({
     workload: Joi.workload().allow(null).default(null),
     skills: Joi.array().items(Joi.string().uuid()).required(),
     status: Joi.jobStatus().default('sourcing'),
-    isApplicationPageActive: Joi.boolean()
+    isApplicationPageActive: Joi.boolean(),
+    roleIds: Joi.array().items(Joi.string().uuid().required()).default(null)
   }).required()
 }).required()
 
@@ -444,9 +476,9 @@ async function searchJobs (currentUser, criteria, options = { returnAll: false }
       [Op.like]: `%${criteria.title}%`
     }
   }
-  if (criteria.skills) {
+  if (criteria.skill) {
     filter.skills = {
-      [Op.contains]: [criteria.skills]
+      [Op.contains]: [criteria.skill]
     }
   }
   const jobs = await Job.findAll({
diff --git a/src/services/ResourceBookingService.js b/src/services/ResourceBookingService.js
index f5c4020..fd3d777 100644
--- a/src/services/ResourceBookingService.js
+++ b/src/services/ResourceBookingService.js
@@ -1,3 +1,4 @@
+/* eslint-disable no-unreachable */
 /**
  * This service provides operations of ResourceBooking.
  */
diff --git a/src/services/RoleService.js b/src/services/RoleService.js
new file mode 100644
index 0000000..19006f6
--- /dev/null
+++ b/src/services/RoleService.js
@@ -0,0 +1,305 @@
+/**
+ * This service provides operations of Roles.
+ */
+
+const _ = require('lodash')
+const config = require('config')
+const Joi = require('joi')
+const { Op } = require('sequelize')
+const uuid = require('uuid')
+const helper = require('../common/helper')
+const logger = require('../common/logger')
+const errors = require('../common/errors')
+const models = require('../models')
+
+const Role = models.Role
+const esClient = helper.getESClient()
+
+/**
+  * Check user permission for deleting, creating or updating role.
+  * @param {Object} currentUser the user who perform this operation.
+  * @returns {undefined}
+  */
+async function _checkUserPermissionForWriteDeleteRole (currentUser) {
+  if (!currentUser.hasManagePermission && !currentUser.isMachine) {
+    throw new errors.ForbiddenError('You are not allowed to perform this action!')
+  }
+}
+
+/**
+  * Cleans and validates skill names using skills service
+  * @param {Array<string>} skills array of skill names to validate
+  * @returns {undefined}
+  */
+async function _cleanAndValidateSkillNames (skills) {
+  // remove duplicates, leading and trailing whitespaces, remove empties and convert to lowercase.
+  const cleanedSkills = _.uniq(_.filter(_.map(skills, skill => _.toLower(_.trim(skill))), skill => !_.isEmpty(skill)))
+  if (cleanedSkills.length > 0) {
+    // search skills if they are exists
+    const { result } = await helper.getTopcoderSkills({ name: _.join(cleanedSkills, ',') })
+    const skillNames = _.map(result, 'name')
+    // find skills that not valid
+    const unValidSkills = _.differenceWith(cleanedSkills, skillNames, (a, b) => _.toLower(a) === _.toLower(b))
+    if (unValidSkills.length > 0) {
+      throw new errors.BadRequestError(`skills: "${unValidSkills}" are not valid`)
+    }
+    return cleanedSkills
+  } else {
+    return null
+  }
+}
+
+/**
+  * Check user permission for deleting, creating or updating role.
+  * @param {Object} currentUser the user who perform this operation.
+  * @returns {undefined}
+  */
+async function _checkIfSameNamedRoleExists (roleName) {
+  // We can't create another Role with the same name
+  const role = await Role.findOne({
+    where: {
+      name: { [Op.iLike]: roleName }
+    },
+    raw: true
+  })
+  if (role) {
+    throw new errors.BadRequestError(`Role: "${role.name}" is already exists.`)
+  }
+}
+
+/**
+  * Get role by id
+  * @param {Object} currentUser the user who perform this operation.
+  * @param {String} id the role id
+  * @param {Boolean} fromDb flag if query db for data or not
+  * @returns {Object} the role
+  */
+async function getRole (currentUser, id, fromDb = false) {
+  if (!fromDb) {
+    try {
+      const role = await esClient.get({
+        index: config.esConfig.ES_INDEX_ROLE,
+        id
+      })
+      return { id: role.body._id, ...role.body._source }
+    } catch (err) {
+      if (helper.isDocumentMissingException(err)) {
+        throw new errors.NotFoundError(`id: ${id} "Role" not found`)
+      }
+    }
+  }
+  logger.info({ component: 'RoleService', context: 'getRole', message: 'try to query db for data' })
+  const role = await Role.findById(id)
+
+  return role.toJSON()
+}
+
+getRole.schema = Joi.object().keys({
+  currentUser: Joi.object().required(),
+  id: Joi.string().uuid().required(),
+  fromDb: Joi.boolean()
+}).required()
+
+/**
+  * Create role
+  * @param {Object} currentUser the user who perform this operation
+  * @param {Object} role the role to be created
+  * @returns {Object} the created role
+  */
+async function createRole (currentUser, role) {
+  // check permission
+  await _checkUserPermissionForWriteDeleteRole(currentUser)
+  // check if another Role with the same name exists.
+  await _checkIfSameNamedRoleExists(role.name)
+  // clean and validate skill names
+  if (role.listOfSkills) {
+    role.listOfSkills = await _cleanAndValidateSkillNames(role.listOfSkills)
+  }
+
+  role.id = uuid.v4()
+  role.createdBy = await helper.getUserId(currentUser.userId)
+
+  const created = await Role.create(role)
+
+  await helper.postEvent(config.TAAS_ROLE_CREATE_TOPIC, created.toJSON())
+  return created.toJSON()
+}
+
+createRole.schema = Joi.object().keys({
+  currentUser: Joi.object().required(),
+  role: Joi.object().keys({
+    name: Joi.string().max(50).required(),
+    description: Joi.string().max(1000),
+    listOfSkills: Joi.array().items(Joi.string().max(50).required()),
+    rates: Joi.array().items(Joi.object().keys({
+      global: Joi.smallint().required(),
+      inCountry: Joi.smallint().required(),
+      offShore: Joi.smallint().required(),
+      rate30Global: Joi.smallint(),
+      rate30InCountry: Joi.smallint(),
+      rate30OffShore: Joi.smallint(),
+      rate20Global: Joi.smallint(),
+      rate20InCountry: Joi.smallint(),
+      rate20OffShore: Joi.smallint()
+    }).required()).required(),
+    numberOfMembers: Joi.number(),
+    numberOfMembersAvailable: Joi.smallint(),
+    imageUrl: Joi.string().uri().max(255),
+    timeToCandidate: Joi.smallint(),
+    timeToInterview: Joi.smallint()
+  }).required()
+}).required()
+
+/**
+  * Partially Update role
+  * @param {Object} currentUser the user who perform this operation
+  * @param {String} id the role id
+  * @param {Object} data the data to be updated
+  * @returns {Object} the updated role
+  */
+async function updateRole (currentUser, id, data) {
+  // check permission
+  await _checkUserPermissionForWriteDeleteRole(currentUser)
+
+  const role = await Role.findById(id)
+  const oldValue = role.toJSON()
+  // if name is changed, check if another Role with the same name exists.
+  if (data.name && data.name.toLowerCase() !== role.dataValues.name.toLowerCase()) {
+    await _checkIfSameNamedRoleExists(data.name)
+  }
+  // clean and validate skill names
+  if (data.listOfSkills) {
+    data.listOfSkills = await _cleanAndValidateSkillNames(data.listOfSkills)
+  }
+
+  data.updatedBy = await helper.getUserId(currentUser.userId)
+  const updated = await role.update(data)
+
+  await helper.postEvent(config.TAAS_ROLE_UPDATE_TOPIC, updated.toJSON(), { oldValue: oldValue })
+  return updated.toJSON()
+}
+
+updateRole.schema = Joi.object().keys({
+  currentUser: Joi.object().required(),
+  id: Joi.string().uuid().required(),
+  data: Joi.object().keys({
+    name: Joi.string().max(50),
+    description: Joi.string().max(1000).allow(null),
+    listOfSkills: Joi.array().items(Joi.string().max(50).required()).allow(null),
+    rates: Joi.array().items(Joi.object().keys({
+      global: Joi.smallint().required(),
+      inCountry: Joi.smallint().required(),
+      offShore: Joi.smallint().required(),
+      rate30Global: Joi.smallint(),
+      rate30InCountry: Joi.smallint(),
+      rate30OffShore: Joi.smallint(),
+      rate20Global: Joi.smallint(),
+      rate20InCountry: Joi.smallint(),
+      rate20OffShore: Joi.smallint()
+    }).required()),
+    numberOfMembers: Joi.number().allow(null),
+    numberOfMembersAvailable: Joi.smallint().allow(null),
+    imageUrl: Joi.string().uri().max(255).allow(null),
+    timeToCandidate: Joi.smallint().allow(null),
+    timeToInterview: Joi.smallint().allow(null)
+  }).required()
+}).required()
+
+/**
+  * Delete role by id
+  * @param {Object} currentUser the user who perform this operation
+  * @param {String} id the role id
+  */
+async function deleteRole (currentUser, id) {
+  // check permission
+  await _checkUserPermissionForWriteDeleteRole(currentUser)
+
+  const role = await Role.findById(id)
+  await role.destroy()
+  await helper.postEvent(config.TAAS_ROLE_DELETE_TOPIC, { id })
+}
+
+deleteRole.schema = Joi.object().keys({
+  currentUser: Joi.object().required(),
+  id: Joi.string().uuid().required()
+}).required()
+
+/**
+  * List roles
+  * @param {Object} currentUser the user who perform this operation.
+  * @param {Object} criteria the search criteria
+  * @returns {Object} the search result
+  */
+async function searchRoles (currentUser, criteria) {
+  // clean skill names and convert into an array
+  criteria.skillsList = _.filter(_.map(_.split(_.trim(criteria.skillsList), ','), skill => _.toLower(_.trim(skill))), skill => !_.isEmpty(skill))
+  try {
+    const esQuery = {
+      index: config.get('esConfig.ES_INDEX_ROLE'),
+      body: {
+        query: {
+          bool: {
+            must: []
+          }
+        },
+        size: 10000,
+        sort: [{ name: { order: 'asc' } }]
+      }
+    }
+    // Apply skill name filters. listOfSkills array should include all skills provided in criteria.
+    _.each(criteria.skillsList, skill => {
+      esQuery.body.query.bool.must.push({
+        term: {
+          listOfSkills: skill
+        }
+      })
+    })
+    // Apply name filter, allow partial match
+    if (criteria.keyword) {
+      esQuery.body.query.bool.must.push({
+        wildcard: {
+          name: `*${criteria.keyword}*`
+
+        }
+      })
+    }
+    logger.debug({ component: 'RoleService', context: 'searchRoles', message: `Query: ${JSON.stringify(esQuery)}` })
+
+    const { body } = await esClient.search(esQuery)
+    return _.map(body.hits.hits, (hit) => _.assign(hit._source, { id: hit._id }))
+  } catch (err) {
+    logger.logFullError(err, { component: 'RoleService', context: 'searchRoles' })
+  }
+  logger.info({ component: 'RoleService', context: 'searchRoles', message: 'fallback to DB query' })
+  const filter = { [Op.and]: [] }
+  // Apply skill name filters. listOfSkills array should include all skills provided in criteria.
+  if (criteria.skillsList) {
+    filter[Op.and].push({ listOfSkills: { [Op.contains]: criteria.skillsList } })
+  }
+  // Apply name filter, allow partial match and ignore case
+  if (criteria.keyword) {
+    filter[Op.and].push({ name: { [Op.iLike]: `%${criteria.keyword}%` } })
+  }
+  const queryCriteria = {
+    where: filter,
+    order: [['name', 'asc']]
+  }
+  const roles = await Role.findAll(queryCriteria)
+  return roles
+}
+
+searchRoles.schema = Joi.object().keys({
+  currentUser: Joi.object().required(),
+  criteria: Joi.object().keys({
+    skillsList: Joi.string(),
+    keyword: Joi.string()
+  }).required()
+}).required()
+
+module.exports = {
+  getRole,
+  createRole,
+  updateRole,
+  deleteRole,
+  searchRoles
+}
diff --git a/src/services/TeamService.js b/src/services/TeamService.js
index 3f6dbfd..4052e94 100644
--- a/src/services/TeamService.js
+++ b/src/services/TeamService.js
@@ -2,16 +2,16 @@
  * This service provides operations of Job.
  */
 
-const _ = require('lodash');
-const Joi = require('joi');
-const dateFNS = require('date-fns');
-const config = require('config');
-const emailTemplateConfig = require('../../config/email_template.config');
-const helper = require('../common/helper');
-const logger = require('../common/logger');
-const errors = require('../common/errors');
-const JobService = require('./JobService');
-const ResourceBookingService = require('./ResourceBookingService');
+const _ = require('lodash')
+const Joi = require('joi')
+const dateFNS = require('date-fns')
+const config = require('config')
+const emailTemplateConfig = require('../../config/email_template.config')
+const helper = require('../common/helper')
+const logger = require('../common/logger')
+const errors = require('../common/errors')
+const JobService = require('./JobService')
+const ResourceBookingService = require('./ResourceBookingService')
 
 const emailTemplates = _.mapValues(emailTemplateConfig, (template) => {
   return {
@@ -20,9 +20,9 @@ const emailTemplates = _.mapValues(emailTemplateConfig, (template) => {
     from: template.from,
     recipients: template.recipients,
     cc: template.cc,
-    sendgridTemplateId: template.sendgridTemplateId,
-  };
-});
+    sendgridTemplateId: template.sendgridTemplateId
+  }
+})
 
 /**
  * Function to get placed resource bookings with specific projectIds
@@ -30,14 +30,14 @@ const emailTemplates = _.mapValues(emailTemplateConfig, (template) => {
  * @param {Array} projectIds project ids
  * @returns the request result
  */
-async function _getPlacedResourceBookingsByProjectIds(currentUser, projectIds) {
-  const criteria = { status: 'placed', projectIds };
+async function _getPlacedResourceBookingsByProjectIds (currentUser, projectIds) {
+  const criteria = { status: 'placed', projectIds }
   const { result } = await ResourceBookingService.searchResourceBookings(
     currentUser,
     criteria,
     { returnAll: true }
-  );
-  return result;
+  )
+  return result
 }
 
 /**
@@ -46,13 +46,13 @@ async function _getPlacedResourceBookingsByProjectIds(currentUser, projectIds) {
  * @param {Array} projectIds project ids
  * @returns the request result
  */
-async function _getJobsByProjectIds(currentUser, projectIds) {
+async function _getJobsByProjectIds (currentUser, projectIds) {
   const { result } = await JobService.searchJobs(
     currentUser,
     { projectIds },
     { returnAll: true }
-  );
-  return result;
+  )
+  return result
 }
 
 /**
@@ -61,26 +61,26 @@ async function _getJobsByProjectIds(currentUser, projectIds) {
  * @param {Object} criteria the search criteria
  * @returns {Object} the search result, contain total/page/perPage and result array
  */
-async function searchTeams(currentUser, criteria) {
-  const sort = `${criteria.sortBy} ${criteria.sortOrder}`;
+async function searchTeams (currentUser, criteria) {
+  const sort = `${criteria.sortBy} ${criteria.sortOrder}`
   // Get projects from /v5/projects with searching criteria
   const {
     total,
     page,
     perPage,
-    result: projects,
+    result: projects
   } = await helper.getProjects(currentUser, {
     page: criteria.page,
     perPage: criteria.perPage,
     name: criteria.name,
-    sort,
-  });
+    sort
+  })
   return {
     total,
     page,
     perPage,
-    result: await getTeamDetail(currentUser, projects),
-  };
+    result: await getTeamDetail(currentUser, projects)
+  }
 }
 
 searchTeams.schema = Joi.object()
@@ -107,13 +107,13 @@ searchTeams.schema = Joi.object()
           then: Joi.forbidden().label(
             'sortOrder(with sortBy being `best match`)'
           ),
-          otherwise: Joi.string().valid('asc', 'desc').default('desc'),
+          otherwise: Joi.string().valid('asc', 'desc').default('desc')
         }),
-        name: Joi.string(),
+        name: Joi.string()
       })
-      .required(),
+      .required()
   })
-  .required();
+  .required()
 
 /**
  * Get team details
@@ -122,69 +122,69 @@ searchTeams.schema = Joi.object()
  * @param {Object} isSearch the flag whether for search function
  * @returns {Object} the search result
  */
-async function getTeamDetail(currentUser, projects, isSearch = true) {
-  const projectIds = _.map(projects, 'id');
+async function getTeamDetail (currentUser, projects, isSearch = true) {
+  const projectIds = _.map(projects, 'id')
   // Get all placed resourceBookings filtered by projectIds
   const resourceBookings = await _getPlacedResourceBookingsByProjectIds(
     currentUser,
     projectIds
-  );
+  )
   // Get all jobs filtered by projectIds
-  const jobs = await _getJobsByProjectIds(currentUser, projectIds);
+  const jobs = await _getJobsByProjectIds(currentUser, projectIds)
 
   // Get first week day and last week day
-  const curr = new Date();
-  const firstDay = dateFNS.startOfWeek(curr);
-  const lastDay = dateFNS.endOfWeek(curr);
+  const curr = new Date()
+  const firstDay = dateFNS.startOfWeek(curr)
+  const lastDay = dateFNS.endOfWeek(curr)
 
   logger.debug({
     component: 'TeamService',
     context: 'getTeamDetail',
-    message: `week started: ${firstDay}, week ended: ${lastDay}`,
-  });
+    message: `week started: ${firstDay}, week ended: ${lastDay}`
+  })
 
-  const result = [];
+  const result = []
   for (const project of projects) {
-    const rbs = _.filter(resourceBookings, { projectId: project.id });
-    const res = _.clone(project);
-    res.weeklyCost = 0;
-    res.resources = [];
+    const rbs = _.filter(resourceBookings, { projectId: project.id })
+    const res = _.clone(project)
+    res.weeklyCost = 0
+    res.resources = []
 
     if (rbs && rbs.length > 0) {
       // Get minimal start date and maximal end date
-      const startDates = [];
-      const endDates = [];
+      const startDates = []
+      const endDates = []
       for (const rbsItem of rbs) {
         if (rbsItem.startDate) {
-          startDates.push(new Date(rbsItem.startDate));
+          startDates.push(new Date(rbsItem.startDate))
         }
         if (rbsItem.endDate) {
-          endDates.push(new Date(rbsItem.endDate));
+          endDates.push(new Date(rbsItem.endDate))
         }
       }
 
       if (startDates && startDates.length > 0) {
-        res.startDate = _.min(startDates);
+        res.startDate = _.min(startDates)
       }
       if (endDates && endDates.length > 0) {
-        res.endDate = _.max(endDates);
+        res.endDate = _.max(endDates)
       }
 
       // Count weekly rate
       for (const item of rbs) {
         // ignore any resourceBooking that has customerRate missed
         if (!item.customerRate) {
-          continue;
+          continue
         }
-        const startDate = new Date(item.startDate);
-        const endDate = new Date(item.endDate);
+        const startDate = new Date(item.startDate)
+        const endDate = new Date(item.endDate)
 
         // normally startDate is smaller than endDate for a resourceBooking so not check if startDate < endDate
         if (
           (!item.startDate || startDate < lastDay) &&
           (!item.endDate || endDate > firstDay)
         ) {
-          res.weeklyCost += item.customerRate;
+          res.weeklyCost += item.customerRate
         }
       }
 
@@ -194,48 +194,48 @@ async function getTeamDetail(currentUser, projects, isSearch = true) {
             const resource = {
               id: rb.id,
               userId: user.id,
-              ..._.pick(user, ['handle', 'firstName', 'lastName', 'skills']),
-            };
+              ..._.pick(user, ['handle', 'firstName', 'lastName', 'skills'])
+            }
             // If call function is not search, add jobId field
             if (!isSearch) {
-              resource.jobId = rb.jobId;
-              resource.customerRate = rb.customerRate;
-              resource.startDate = rb.startDate;
-              resource.endDate = rb.endDate;
+              resource.jobId = rb.jobId
+              resource.customerRate = rb.customerRate
+              resource.startDate = rb.startDate
+              resource.endDate = rb.endDate
             }
-            return resource;
-          });
+            return resource
+          })
         })
-      );
+      )
       if (resourceInfos && resourceInfos.length > 0) {
-        res.resources = resourceInfos;
+        res.resources = resourceInfos
 
-        const userHandles = _.map(resourceInfos, 'handle');
+        const userHandles = _.map(resourceInfos, 'handle')
         // Get user photo from /v5/members
-        const members = await helper.getMembers(userHandles);
+        const members = await helper.getMembers(userHandles)
 
         for (const item of res.resources) {
           const findMember = _.find(members, {
-            handleLower: item.handle.toLowerCase(),
-          });
+            handleLower: item.handle.toLowerCase()
+          })
           if (findMember && findMember.photoURL) {
-            item.photo_url = findMember.photoURL;
+            item.photo_url = findMember.photoURL
           }
         }
       }
     }
 
-    const jobsTmp = _.filter(jobs, { projectId: project.id });
+    const jobsTmp = _.filter(jobs, { projectId: project.id })
     if (jobsTmp && jobsTmp.length > 0) {
       if (isSearch) {
         // Count total positions
-        res.totalPositions = 0;
+        res.totalPositions = 0
         for (const item of jobsTmp) {
           // only sum numPositions of jobs whose status is NOT cancelled or closed
           if (['cancelled', 'closed'].includes(item.status)) {
-            continue;
+            continue
           }
-          res.totalPositions += item.numPositions;
+          res.totalPositions += item.numPositions
         }
       } else {
         res.jobs = _.map(jobsTmp, (job) => {
@@ -249,15 +249,15 @@ async function getTeamDetail(currentUser, projects, isSearch = true) {
             'skills',
             'customerRate',
             'status',
-            'title',
-          ]);
-        });
+            'title'
+          ])
+        })
       }
     }
-    result.push(res);
+    result.push(res)
   }
 
-  return result;
+  return result
 }
 
 /**
@@ -266,35 +266,35 @@ async function getTeamDetail(currentUser, projects, isSearch = true) {
  * @param {String} id the job id
  * @returns {Object} the team
  */
-async function getTeam(currentUser, id) {
-  const project = await helper.getProjectById(currentUser, id);
-  const result = await getTeamDetail(currentUser, [project], false);
-  const teamDetail = result[0];
+async function getTeam (currentUser, id) {
+  const project = await helper.getProjectById(currentUser, id)
+  const result = await getTeamDetail(currentUser, [project], false)
+  const teamDetail = result[0]
 
   // add job skills for result
-  let jobSkills = [];
+  let jobSkills = []
   if (teamDetail && teamDetail.jobs) {
     for (const job of teamDetail.jobs) {
       if (job.skills) {
-        const usersPromises = [];
+        const usersPromises = []
         _.map(job.skills, (skillId) => {
-          usersPromises.push(helper.getSkillById(skillId));
-        });
-        jobSkills = await Promise.all(usersPromises);
-        job.skills = jobSkills;
+          usersPromises.push(helper.getSkillById(skillId))
+        })
+        jobSkills = await Promise.all(usersPromises)
+        job.skills = jobSkills
       }
     }
   }
 
-  return teamDetail;
+  return teamDetail
 }
 
 getTeam.schema = Joi.object()
   .keys({
     currentUser: Joi.object().required(),
-    id: Joi.number().integer().required(),
+    id: Joi.number().integer().required()
   })
-  .required();
+  .required()
 
 /**
  * Get team job with id
@@ -303,25 +303,25 @@ getTeam.schema = Joi.object()
  * @param {String} jobId the job id
  * @returns the team job
  */
-async function getTeamJob(currentUser, id, jobId) {
-  const project = await helper.getProjectById(currentUser, id);
-  const jobs = await _getJobsByProjectIds(currentUser, [project.id]);
-  const job = _.find(jobs, { id: jobId });
+async function getTeamJob (currentUser, id, jobId) {
+  const project = await helper.getProjectById(currentUser, id)
+  const jobs = await _getJobsByProjectIds(currentUser, [project.id])
+  const job = _.find(jobs, { id: jobId })
 
   if (!job) {
     throw new errors.NotFoundError(
       `id: ${jobId} "Job" with Team id ${id} doesn't exist`
-    );
+    )
   }
   const result = {
     id: job.id,
-    title: job.title,
-  };
+    title: job.title
+  }
 
   if (job.skills) {
     result.skills = await Promise.all(
       _.map(job.skills, (skillId) => helper.getSkillById(skillId))
-    );
+    )
   }
 
   // If the job has candidates, the following data for each candidate would be populated:
@@ -336,12 +336,12 @@ async function getTeamJob(currentUser, id, jobId) {
       _.map(_.uniq(_.map(job.candidates, 'userId')), (userId) =>
         helper.getUserById(userId, true)
       )
-    );
-    const userMap = _.groupBy(users, 'id');
+    )
+    const userMap = _.groupBy(users, 'id')
 
     // find photo URLs for users
-    const members = await helper.getMembers(_.map(users, 'handle'));
-    const photoURLMap = _.groupBy(members, 'handleLower');
+    const members = await helper.getMembers(_.map(users, 'handle'))
+    const photoURLMap = _.groupBy(members, 'handleLower')
 
     result.candidates = _.map(job.candidates, (candidate) => {
       const candidateData = _.pick(candidate, [
@@ -349,33 +349,33 @@ async function getTeamJob(currentUser, id, jobId) {
         'resume',
         'userId',
         'interviews',
-        'id',
-      ]);
-      const userData = userMap[candidate.userId][0];
+        'id'
+      ])
+      const userData = userMap[candidate.userId][0]
       // attach user data to the candidate
       Object.assign(
         candidateData,
         _.pick(userData, ['handle', 'firstName', 'lastName', 'skills'])
-      );
+      )
       // attach photo URL to the candidate
-      const handleLower = userData.handle.toLowerCase();
+      const handleLower = userData.handle.toLowerCase()
       if (photoURLMap[handleLower]) {
-        candidateData.photo_url = photoURLMap[handleLower][0].photoURL;
+        candidateData.photo_url = photoURLMap[handleLower][0].photoURL
       }
-      return candidateData;
-    });
+      return candidateData
+    })
   }
 
-  return result;
+  return result
 }
 
 getTeamJob.schema = Joi.object()
   .keys({
     currentUser: Joi.object().required(),
     id: Joi.number().integer().required(),
-    jobId: Joi.string().guid().required(),
+    jobId: Joi.string().guid().required()
   })
-  .required();
+  .required()
 
 /**
  * Send email through a particular template
@@ -383,21 +383,21 @@ getTeamJob.schema = Joi.object()
  * @param {Object} data the email object
  * @returns {undefined}
  */
-async function sendEmail(currentUser, data) {
-  const template = emailTemplates[data.template];
-  const dataCC = data.cc || [];
-  const templateCC = template.cc || [];
-  const dataRecipients = data.recipients || [];
-  const templateRecipients = template.recipients || [];
+async function sendEmail (currentUser, data) {
+  const template = emailTemplates[data.template]
+  const dataCC = data.cc || []
+  const templateCC = template.cc || []
+  const dataRecipients = data.recipients || []
+  const templateRecipients = template.recipients || []
   const subjectBody = {
     subject: data.subject || template.subject,
-    body: data.body || template.body,
-  };
+    body: data.body || template.body
+  }
   for (const key in subjectBody) {
     subjectBody[key] = await helper.substituteStringByObject(
       subjectBody[key],
       data.data
-    );
+    )
   }
   const emailData = {
     // override template if coming data already have the 'from' address
@@ -407,9 +407,9 @@ async function sendEmail(currentUser, data) {
     cc: _.uniq([...dataCC, ...templateCC]),
     data: { ...data.data, ...subjectBody },
     sendgrid_template_id: template.sendgridTemplateId,
-    version: 'v3',
-  };
-  await helper.postEvent(config.EMAIL_TOPIC, emailData);
+    version: 'v3'
+  }
+  await helper.postEvent(config.EMAIL_TOPIC, emailData)
 }
 
 sendEmail.schema = Joi.object()
@@ -423,11 +423,11 @@ sendEmail.schema = Joi.object()
         data: Joi.object().required(),
         from: Joi.string().email(),
         recipients: Joi.array().items(Joi.string().email()).allow(null),
-        cc: Joi.array().items(Joi.string().email()).allow(null),
+        cc: Joi.array().items(Joi.string().email()).allow(null)
       })
-      .required(),
+      .required()
   })
-  .required();
+  .required()
 
 /**
  * Add a member to a team as customer.
@@ -437,25 +437,25 @@ sendEmail.schema = Joi.object()
  * @param {String} fields the fields to be returned
  * @returns {Object} the member added
  */
-async function _addMemberToProjectAsCustomer(projectId, userId, fields) {
+async function _addMemberToProjectAsCustomer (projectId, userId, fields) {
   try {
     const member = await helper.createProjectMember(
       projectId,
       { userId: userId, role: 'customer' },
       { fields }
-    );
-    return member;
+    )
+    return member
   } catch (err) {
-    err.message = _.get(err, 'response.body.message') || err.message;
+    err.message = _.get(err, 'response.body.message') || err.message
     if (err.message && err.message.includes('User already registered')) {
-      throw new Error('User is already added');
+      throw new Error('User is already added')
     }
     logger.error({
       component: 'TeamService',
       context: '_addMemberToProjectAsCustomer',
-      message: err.message,
-    });
-    throw err;
+      message: err.message
+    })
+    throw err
   }
 }
 
@@ -467,16 +467,16 @@ async function _addMemberToProjectAsCustomer(projectId, userId, fields) {
  * @param {Object} data the object including members with handle/email to be added
  * @returns {Object} the success/failed added members
  */
-async function addMembers(currentUser, id, criteria, data) {
-  await helper.getProjectById(currentUser, id); // check whether the user can access the project
+async function addMembers (currentUser, id, criteria, data) {
+  await helper.getProjectById(currentUser, id) // check whether the user can access the project
 
   const result = {
     success: [],
-    failed: [],
-  };
+    failed: []
+  }
 
-  const handles = data.handles || [];
-  const emails = data.emails || [];
+  const handles = data.handles || []
+  const emails = data.emails || []
 
   const handleMembers = await helper
     .getMemberDetailsByHandles(handles)
@@ -484,9 +484,9 @@ async function addMembers(currentUser, id, criteria, data) {
       _.map(members, (member) => ({
         ...member,
         // populate members with lower-cased handle for case insensitive search
-        handleLowerCase: member.handle.toLowerCase(),
+        handleLowerCase: member.handle.toLowerCase()
       }))
-    );
+    )
 
   const emailMembers = await helper
     .getMemberDetailsByEmails(emails)
@@ -494,20 +494,20 @@ async function addMembers(currentUser, id, criteria, data) {
       _.map(members, (member) => ({
         ...member,
         // populate members with lower-cased email for case insensitive search
-        emailLowerCase: member.email.toLowerCase(),
+        emailLowerCase: member.email.toLowerCase()
       }))
-    );
+    )
 
   await Promise.all([
     Promise.all(
       handles.map((handle) => {
         const memberDetails = _.find(handleMembers, {
-          handleLowerCase: handle.toLowerCase(),
-        });
+          handleLowerCase: handle.toLowerCase()
+        })
 
         if (!memberDetails) {
-          result.failed.push({ error: "User doesn't exist", handle });
-          return;
+          result.failed.push({ error: "User doesn't exist", handle })
+          return
         }
 
         return _addMemberToProjectAsCustomer(
@@ -517,23 +517,23 @@ async function addMembers(currentUser, id, criteria, data) {
         )
           .then((member) => {
             // note, that we return `handle` in the same case it was in request
-            result.success.push({ ...member, handle });
+            result.success.push({ ...member, handle })
           })
           .catch((err) => {
-            result.failed.push({ error: err.message, handle });
-          });
+            result.failed.push({ error: err.message, handle })
+          })
       })
     ),
 
     Promise.all(
       emails.map((email) => {
         const memberDetails = _.find(emailMembers, {
-          emailLowerCase: email.toLowerCase(),
-        });
+          emailLowerCase: email.toLowerCase()
+        })
 
         if (!memberDetails) {
-          result.failed.push({ error: "User doesn't exist", email });
-          return;
+          result.failed.push({ error: "User doesn't exist", email })
+          return
         }
 
         return _addMemberToProjectAsCustomer(
@@ -543,16 +543,16 @@ async function addMembers(currentUser, id, criteria, data) {
         )
           .then((member) => {
             // note, that we return `email` in the same case it was in request
-            result.success.push({ ...member, email });
+            result.success.push({ ...member, email })
           })
           .catch((err) => {
-            result.failed.push({ error: err.message, email });
-          });
+            result.failed.push({ error: err.message, email })
+          })
       })
-    ),
-  ]);
+    )
+  ])
 
-  return result;
+  return result
 }
 
 addMembers.schema = Joi.object()
@@ -561,18 +561,18 @@ addMembers.schema = Joi.object()
     id: Joi.number().integer().required(),
     criteria: Joi.object()
       .keys({
-        fields: Joi.string(),
+        fields: Joi.string()
       })
       .required(),
     data: Joi.object()
       .keys({
         handles: Joi.array().items(Joi.string()),
-        emails: Joi.array().items(Joi.string().email()),
+        emails: Joi.array().items(Joi.string().email())
       })
       .or('handles', 'emails')
-      .required(),
+      .required()
   })
-  .required();
+  .required()
 
 /**
  * Search members in a team.
@@ -583,9 +583,9 @@ addMembers.schema = Joi.object()
  * @params {Object} criteria the search criteria
  * @returns {Object} the search result
  */
-async function searchMembers(currentUser, id, criteria) {
-  const result = await helper.listProjectMembers(currentUser, id, criteria);
-  return { result };
+async function searchMembers (currentUser, id, criteria) {
+  const result = await helper.listProjectMembers(currentUser, id, criteria)
+  return { result }
 }
 
 searchMembers.schema = Joi.object()
@@ -595,11 +595,11 @@ searchMembers.schema = Joi.object()
     criteria: Joi.object()
       .keys({
         role: Joi.string(),
-        fields: Joi.string(),
+        fields: Joi.string()
       })
-      .required(),
+      .required()
   })
-  .required();
+  .required()
 
 /**
  * Search member invites for a team.
@@ -610,13 +610,13 @@ searchMembers.schema = Joi.object()
  * @params {Object} criteria the search criteria
  * @returns {Object} the search result
  */
-async function searchInvites(currentUser, id, criteria) {
+async function searchInvites (currentUser, id, criteria) {
   const result = await helper.listProjectMemberInvites(
     currentUser,
     id,
     criteria
-  );
-  return { result };
+  )
+  return { result }
 }
 
 searchInvites.schema = Joi.object()
@@ -625,11 +625,11 @@ searchInvites.schema = Joi.object()
     id: Joi.number().integer().required(),
     criteria: Joi.object()
       .keys({
-        fields: Joi.string(),
+        fields: Joi.string()
       })
-      .required(),
+      .required()
   })
-  .required();
+  .required()
 
 /**
  * Remove a member from a team.
@@ -640,17 +640,17 @@ searchInvites.schema = Joi.object()
  * @param {String} projectMemberId the id of the project member
  * @returns {undefined}
  */
-async function deleteMember(currentUser, id, projectMemberId) {
-  await helper.deleteProjectMember(currentUser, id, projectMemberId);
+async function deleteMember (currentUser, id, projectMemberId) {
+  await helper.deleteProjectMember(currentUser, id, projectMemberId)
 }
 
 deleteMember.schema = Joi.object()
   .keys({
     currentUser: Joi.object().required(),
     id: Joi.number().integer().required(),
-    projectMemberId: Joi.number().integer().required(),
+    projectMemberId: Joi.number().integer().required()
   })
-  .required();
+  .required()
 
 /**
  * Return details about the current user.
@@ -659,31 +659,31 @@ deleteMember.schema = Joi.object()
  * @params {Object} criteria the search criteria
  * @returns {Object} the user data for current user
  */
-async function getMe(currentUser) {
-  return helper.getUserByExternalId(currentUser.userId);
+async function getMe (currentUser) {
+  return helper.getUserByExternalId(currentUser.userId)
 }
 
 getMe.schema = Joi.object()
   .keys({
-    currentUser: Joi.object().required(),
+    currentUser: Joi.object().required()
   })
-  .required();
+  .required()
 
 /**
  * @param {Object} currentUser the user performing the operation.
  * @param {Object} data project data
  * @returns {Object} the created project
  */
-async function createProj(currentUser, data) {
-  return helper.createProject(currentUser, data);
+async function createProj (currentUser, data) {
+  return helper.createProject(currentUser, data)
 }
 
 createProj.schema = Joi.object()
   .keys({
     currentUser: Joi.object().required(),
-    data: Joi.object().required(),
+    data: Joi.object().required()
   })
-  .required();
+  .required()
 
 module.exports = {
   searchTeams,
@@ -695,5 +695,5 @@ module.exports = {
   searchInvites,
   deleteMember,
   getMe,
-  createProj,
-};
+  createProj
+}
-- 
2.29.1.windows.1

